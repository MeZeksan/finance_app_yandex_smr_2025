import 'dart:convert';
import 'package:finance_app_yandex_smr_2025/core/database/entities/backup_operation_entity.dart';
import 'package:finance_app_yandex_smr_2025/core/database/services/database_service.dart';
import 'package:finance_app_yandex_smr_2025/core/network/api_client.dart';
import 'package:finance_app_yandex_smr_2025/core/network/network_service.dart';
import 'package:finance_app_yandex_smr_2025/objectbox.g.dart';
import 'dart:developer' as developer;

class BackupService {
  static final BackupService _instance = BackupService._internal();
  factory BackupService() => _instance;
  BackupService._internal();

  final DatabaseService _databaseService = DatabaseService.instance;
  final ApiClient _apiClient = ApiClient();
  final NetworkService _networkService = NetworkService();

  /// –î–æ–±–∞–≤–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é –≤ –±—ç–∫–∞–ø –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
  Future<void> addBackupOperation({
    required BackupOperationType operationType,
    required BackupDataType dataType,
    required int originalId,
    required Map<String, dynamic> data,
  }) async {
    final jsonData = json.encode(data);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –æ–ø–µ—Ä–∞—Ü–∏—è –¥–ª—è —ç—Ç–æ–π –∑–∞–ø–∏—Å–∏
    final existingOperations = await _getBackupOperationsForRecord(dataType, originalId);
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è, –∞ —Å–µ–π—á–∞—Å —É–¥–∞–ª–µ–Ω–∏–µ - —É–¥–∞–ª—è–µ–º –æ–±–µ
    if (operationType == BackupOperationType.delete) {
      for (final existing in existingOperations) {
        if (existing.operationTypeEnum == BackupOperationType.create) {
          await _deleteBackupOperation(existing.id);
          return; // –ù–µ —Å–æ–∑–¥–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é —É–¥–∞–ª–µ–Ω–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏, –∫–æ—Ç–æ—Ä–∞—è –Ω–µ –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
        }
      }
    }
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ–ø–µ—Ä–∞—Ü–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, –∑–∞–º–µ–Ω—è–µ–º –∏—Ö –æ–¥–Ω–æ–π
    if (operationType == BackupOperationType.update) {
      final updateOperations = existingOperations
          .where((op) => op.operationTypeEnum == BackupOperationType.update)
          .toList();
      
      for (final updateOp in updateOperations) {
        await _deleteBackupOperation(updateOp.id);
      }
    }
    
    final backupOperation = BackupOperationEntity(
      operationType: operationType.index,
      dataType: dataType.index,
      originalId: originalId,
      jsonData: jsonData,
    );
    
    await _databaseService.objectBox.backupOperationBox.putAsync(backupOperation);
    developer.log('üìã Backup operation added: ${operationType.name} ${dataType.name} $originalId', name: 'BackupService');
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
  Future<List<BackupOperationEntity>> getPendingBackupOperations() async {
    final query = _databaseService.objectBox.backupOperationBox
        .query(BackupOperationEntity_.attemptedSync.equals(false))
        .order(BackupOperationEntity_.createdAt)
        .build();
    
    final operations = query.find();
    query.close();
    return operations;
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏
  Future<List<BackupOperationEntity>> _getBackupOperationsForRecord(
      BackupDataType dataType, int originalId) async {
    final query = _databaseService.objectBox.backupOperationBox
        .query(BackupOperationEntity_.dataType.equals(dataType.index) &
               BackupOperationEntity_.originalId.equals(originalId))
        .build();
    
    final operations = query.find();
    query.close();
    return operations;
  }

  /// –£–¥–∞–ª–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é –∏–∑ –±—ç–∫–∞–ø–∞
  Future<void> _deleteBackupOperation(int id) async {
    await _databaseService.objectBox.backupOperationBox.removeAsync(id);
  }

  /// –ü–æ–º–µ—Ç–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é –∫–∞–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é
  Future<void> markOperationAsSynced(int operationId) async {
    final operation = _databaseService.objectBox.backupOperationBox.get(operationId);
    if (operation != null) {
      operation.markSyncAttempt();
      await _databaseService.objectBox.backupOperationBox.putAsync(operation);
      await _deleteBackupOperation(operationId);
    }
  }

  /// –ü–æ–º–µ—Ç–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é –∫–∞–∫ –Ω–µ—É–¥–∞—á–Ω—É—é –ø–æ–ø—ã—Ç–∫—É —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
  Future<void> markOperationAsFailed(int operationId, String error) async {
    final operation = _databaseService.objectBox.backupOperationBox.get(operationId);
    if (operation != null) {
      operation.markSyncAttempt(error: error);
      await _databaseService.objectBox.backupOperationBox.putAsync(operation);
    }
  }

  /// –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –æ–∂–∏–¥–∞—é—â–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
  Future<bool> syncPendingOperations() async {
    if (!_networkService.isConnected) {
      developer.log('üìµ No network connection. Skipping sync.', name: 'BackupService');
      return false;
    }

    final pendingOperations = await getPendingBackupOperations();
    if (pendingOperations.isEmpty) {
      developer.log('‚úÖ No pending operations to sync.', name: 'BackupService');
      return true;
    }

    developer.log('üîÑ Syncing ${pendingOperations.length} pending operations', name: 'BackupService');
    bool allSynced = true;
    
    for (final operation in pendingOperations) {
      try {
        developer.log('üîÑ Syncing operation: ${operation.operationTypeEnum.name} ${operation.dataTypeEnum.name} ${operation.originalId}', name: 'BackupService');
        final success = await _syncOperation(operation);
        if (success) {
          await markOperationAsSynced(operation.id);
          developer.log('‚úÖ Operation synced successfully: ${operation.operationTypeEnum.name} ${operation.dataTypeEnum.name} ${operation.originalId}', name: 'BackupService');
        } else {
          allSynced = false;
          await markOperationAsFailed(operation.id, 'Unknown sync error');
          developer.log('‚ùå Operation sync failed: ${operation.operationTypeEnum.name} ${operation.dataTypeEnum.name} ${operation.originalId}', name: 'BackupService');
        }
      } catch (e) {
        allSynced = false;
        await markOperationAsFailed(operation.id, e.toString());
        developer.log('‚ùå Error syncing operation: ${operation.operationTypeEnum.name} ${operation.dataTypeEnum.name} ${operation.originalId} - $e', name: 'BackupService');
      }
    }

    return allSynced;
  }

  /// –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é
  Future<bool> _syncOperation(BackupOperationEntity operation) async {
    final data = json.decode(operation.jsonData) as Map<String, dynamic>;
    
    try {
      switch (operation.dataTypeEnum) {
        case BackupDataType.transaction:
          return await _syncTransactionOperation(operation, data);
        case BackupDataType.account:
          return await _syncAccountOperation(operation, data);
        case BackupDataType.category:
          return await _syncCategoryOperation(operation, data);
      }
    } catch (e) {
      developer.log('‚ùå Error syncing operation: $e', name: 'BackupService');
      return false;
    }
  }

  /// –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é —Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–µ–π
  Future<bool> _syncTransactionOperation(BackupOperationEntity operation, Map<String, dynamic> data) async {
    try {
      switch (operation.operationTypeEnum) {
        case BackupOperationType.create:
          developer.log('üîÑ Creating transaction on server: ${json.encode(data)}', name: 'BackupService');
          final response = await _apiClient.post('/transactions', data: data);
          developer.log('üìä Server response: ${response.statusCode} - ${response.data}', name: 'BackupService');
          
          final isSuccess = response.statusCode == 200 || response.statusCode == 201;
          if (isSuccess) {
            developer.log('‚úÖ Transaction created successfully on server', name: 'BackupService');
          } else {
            developer.log('‚ùå Failed to create transaction: ${response.statusCode}', name: 'BackupService');
          }
          return isSuccess;
        
        case BackupOperationType.update:
          developer.log('üîÑ Updating transaction ${operation.originalId} on server: ${json.encode(data)}', name: 'BackupService');
          final response = await _apiClient.put('/transactions/${operation.originalId}', data: data);
          developer.log('üìä Server response: ${response.statusCode} - ${response.data}', name: 'BackupService');
          return response.statusCode == 200;
        
        case BackupOperationType.delete:
          developer.log('üîÑ Deleting transaction ${operation.originalId} on server', name: 'BackupService');
          final response = await _apiClient.delete('/transactions/${operation.originalId}');
          developer.log('üìä Server response: ${response.statusCode} - ${response.data}', name: 'BackupService');
          return response.statusCode == 200 || response.statusCode == 204;
      }
    } catch (e) {
      developer.log('‚ùå Error syncing transaction: $e', name: 'BackupService');
      throw e;
    }
  }

  /// –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é —Å –∞–∫–∫–∞—É–Ω—Ç–æ–º
  Future<bool> _syncAccountOperation(BackupOperationEntity operation, Map<String, dynamic> data) async {
    switch (operation.operationTypeEnum) {
      case BackupOperationType.create:
        final response = await _apiClient.post('/accounts', data: data);
        return response.statusCode == 200 || response.statusCode == 201;
      
      case BackupOperationType.update:
        final response = await _apiClient.put('/accounts/${operation.originalId}', data: data);
        return response.statusCode == 200;
      
      case BackupOperationType.delete:
        final response = await _apiClient.delete('/accounts/${operation.originalId}');
        return response.statusCode == 200 || response.statusCode == 204;
    }
  }

  /// –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π
  Future<bool> _syncCategoryOperation(BackupOperationEntity operation, Map<String, dynamic> data) async {
    switch (operation.operationTypeEnum) {
      case BackupOperationType.create:
        final response = await _apiClient.post('/categories', data: data);
        return response.statusCode == 200 || response.statusCode == 201;
      
      case BackupOperationType.update:
        final response = await _apiClient.put('/categories/${operation.originalId}', data: data);
        return response.statusCode == 200;
      
      case BackupOperationType.delete:
        final response = await _apiClient.delete('/categories/${operation.originalId}');
        return response.statusCode == 200 || response.statusCode == 204;
    }
  }

  /// –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –Ω–µ—É—Å–ø–µ—à–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ (—Å—Ç–∞—Ä—à–µ 7 –¥–Ω–µ–π)
  Future<void> cleanupOldOperations() async {
    final weekAgo = DateTime.now().subtract(const Duration(days: 7));
    
    final query = _databaseService.objectBox.backupOperationBox
        .query(BackupOperationEntity_.createdAt.lessThan(weekAgo.millisecondsSinceEpoch) &
               BackupOperationEntity_.syncAttempts.greaterThan(3))
        .build();
    
    final oldOperations = query.find();
    query.close();
    
    for (final operation in oldOperations) {
      await _deleteBackupOperation(operation.id);
    }
    
    if (oldOperations.isNotEmpty) {
      developer.log('üßπ Cleaned up ${oldOperations.length} old failed operations', name: 'BackupService');
    }
  }

  /// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –æ–∂–∏–¥–∞—é—â–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
  Future<void> clearAllPendingOperations() async {
    developer.log('üßπ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –æ–∂–∏–¥–∞—é—â–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π', name: 'BackupService');
    
    final pendingOperations = await getPendingBackupOperations();
    developer.log('üìä –ù–∞–π–¥–µ–Ω–æ ${pendingOperations.length} –æ–∂–∏–¥–∞—é—â–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π', name: 'BackupService');
    
    for (final operation in pendingOperations) {
      await _deleteBackupOperation(operation.id);
      developer.log('üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏—è: ${operation.operationTypeEnum.name} ${operation.dataTypeEnum.name} ${operation.originalId}', name: 'BackupService');
    }
    
    developer.log('‚úÖ –í—Å–µ –æ–∂–∏–¥–∞—é—â–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –æ—á–∏—â–µ–Ω—ã', name: 'BackupService');
  }
} 