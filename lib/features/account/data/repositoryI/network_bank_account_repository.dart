import 'package:finance_app_yandex_smr_2025/core/database/entities/backup_operation_entity.dart';
import 'package:finance_app_yandex_smr_2025/core/database/services/database_service.dart';
import 'package:finance_app_yandex_smr_2025/core/network/api_client.dart';
import 'package:finance_app_yandex_smr_2025/core/network/network_service.dart';
import 'package:finance_app_yandex_smr_2025/core/services/backup_service.dart';
import 'package:finance_app_yandex_smr_2025/features/account/data/models/account_brief/account_brief.dart';
import 'package:finance_app_yandex_smr_2025/features/account/data/models/account_create_request/account_create_request.dart';
import 'package:finance_app_yandex_smr_2025/features/account/data/models/account_history_responce/account_history_responce.dart';
import 'package:finance_app_yandex_smr_2025/features/account/data/models/account_responce/account_responce.dart';
import 'package:finance_app_yandex_smr_2025/features/account/data/models/account_update_request/account_update_request.dart';
import 'package:finance_app_yandex_smr_2025/features/account/data/models/stat_item/stat_item.dart';
import 'package:finance_app_yandex_smr_2025/features/account/domain/repository/bank_account_repository.dart';
import 'package:finance_app_yandex_smr_2025/core/database/entities/account_entity.dart';
import 'dart:developer' as developer;

class NetworkBankAccountRepository implements BankAccountRepository {
  final DatabaseService _databaseService = DatabaseService.instance;
  final ApiClient _apiClient = ApiClient();
  final NetworkService _networkService = NetworkService();
  final BackupService _backupService = BackupService();

  @override
  Future<AccountResponce> getAccountById(int accountId) async {
    developer.log(
      'üîç –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—á–µ—Ç–∞ –ø–æ ID: $accountId',
      name: 'NetworkBankAccountRepository',
    );

    // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ–∂–∏–¥–∞—é—â–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
    if (_networkService.isConnected) {
      developer.log('üì° –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ–∂–∏–¥–∞—é—â–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π', name: 'NetworkBankAccountRepository');
      await _backupService.syncPendingOperations();
    } else {
      developer.log('üìµ –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ç–∏', name: 'NetworkBankAccountRepository');
    }

    // –ò—â–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ
    developer.log('üíæ –ü–æ–∏—Å–∫ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ', name: 'NetworkBankAccountRepository');
    final localAccount = await _databaseService.getAccountById(accountId);
    if (localAccount != null) {
      developer.log('‚úÖ –°—á–µ—Ç –Ω–∞–π–¥–µ–Ω –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ: ${localAccount.name}', name: 'NetworkBankAccountRepository');
      return await _mapEntityToResponse(localAccount);
    }

    developer.log('‚ùå –°—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ', name: 'NetworkBankAccountRepository');

    // –ï—Å–ª–∏ –Ω–µ—Ç –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ –∏ –µ—Å—Ç—å —Å–µ—Ç—å, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å —Å–µ—Ä–≤–µ—Ä–∞
    if (_networkService.isConnected) {
      developer.log('üåê –ó–∞–ø—Ä–æ—Å —Å—á–µ—Ç–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞: GET /accounts/$accountId', name: 'NetworkBankAccountRepository');
      try {
        final response = await _apiClient.get('/accounts/$accountId');
        if (response.statusCode == 200 && response.data != null) {
          final accountData = response.data as Map<String, dynamic>;
          final accountResponse = AccountResponce.fromJson(accountData);
          
          developer.log('‚úÖ –°—á–µ—Ç –ø–æ–ª—É—á–µ–Ω —Å —Å–µ—Ä–≤–µ—Ä–∞: ${accountResponse.name}', name: 'NetworkBankAccountRepository');
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω—É—é –±–∞–∑—É
          await _saveAccountToLocal(accountResponse);
          return accountResponse;
        } else {
          developer.log('‚ùå –°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å: ${response.statusCode}', name: 'NetworkBankAccountRepository');
        }
      } catch (e) {
        developer.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—á–µ—Ç–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞: $e', name: 'NetworkBankAccountRepository');
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–æ–æ–±—â–µ –∫–∞–∫–∏–µ-—Ç–æ —Å—á–µ—Ç–∞ –≤ –±–∞–∑–µ
    final allAccounts = await _databaseService.getAllAccounts();
    if (allAccounts.isNotEmpty) {
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π —Å—á–µ—Ç
      developer.log('‚úÖ –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π —Å—á–µ—Ç: ${allAccounts.first.name}', name: 'NetworkBankAccountRepository');
      return await _mapEntityToResponse(allAccounts.first);
    }

    // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, —Å–æ–∑–¥–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π —Å—á–µ—Ç
    developer.log('üí° –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–≥–æ —Å—á–µ—Ç–∞', name: 'NetworkBankAccountRepository');
    return await _createDefaultAccount(accountId);
  }

  // –°–æ–∑–¥–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π —Å—á–µ—Ç –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
  Future<AccountResponce> _createDefaultAccount(int requestedAccountId) async {
    developer.log('üèóÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–≥–æ —Å—á–µ—Ç–∞ –¥–ª—è ID: $requestedAccountId', name: 'NetworkBankAccountRepository');
    
    final now = DateTime.now();
    final defaultAccount = AccountEntity(
      id: 0, // –ò—Å–ø–æ–ª—å–∑—É–µ–º 0 –¥–ª—è –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ID –≤ ObjectBox
      name: '–û—Å–Ω–æ–≤–Ω–æ–π —Å—á–µ—Ç',
      balance: '0.00',
      currency: 'RUB',
      createdAt: now,
      updatedAt: now,
    );
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω—É—é –±–∞–∑—É - ObjectBox –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏—Å–≤–æ–∏—Ç ID
    final actualId = await _databaseService.addAccount(defaultAccount);
    
    developer.log('‚úÖ –î–µ—Ñ–æ–ª—Ç–Ω—ã–π —Å—á–µ—Ç —Å–æ–∑–¥–∞–Ω —Å —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–º ID: $actualId', name: 'NetworkBankAccountRepository');
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Å—á–µ—Ç —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º ID
    final savedAccount = await _databaseService.getAccountById(actualId);
    return await _mapEntityToResponse(savedAccount!);
  }

  @override
  Future<AccountResponce> updateAccount(
    int accountId,
    AccountUpdateRequest request,
  ) async {
    // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
    final existingAccount = await _databaseService.getAccountById(accountId);
    if (existingAccount == null) {
      throw Exception('Account not found');
    }
    
    final updatedAccount = AccountEntity(
      id: accountId,
      name: request.name,
      balance: request.balance,
      currency: request.currency,
      createdAt: existingAccount.createdAt,
      updatedAt: DateTime.now(),
    );
    
    await _databaseService.addAccount(updatedAccount);

    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –±—ç–∫–∞–ø –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    await _backupService.addBackupOperation(
      operationType: BackupOperationType.update,
      dataType: BackupDataType.account,
      originalId: accountId,
      data: request.toJson(),
    );

    // –ï—Å–ª–∏ –µ—Å—Ç—å —Å–µ—Ç—å, –ø—ã—Ç–∞–µ–º—Å—è —Å—Ä–∞–∑—É —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å
    if (_networkService.isConnected) {
      await _backupService.syncPendingOperations();
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    return await _mapEntityToResponse(updatedAccount);
  }

  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å API
  Future<List<AccountBrief>> getAllAccounts() async {
    // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ–∂–∏–¥–∞—é—â–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
    if (_networkService.isConnected) {
      await _backupService.syncPendingOperations();
      
      // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å —Å–µ—Ä–≤–µ—Ä–∞
      try {
        final response = await _apiClient.get('/accounts');
        if (response.statusCode == 200 && response.data != null) {
          final data = response.data as Map<String, dynamic>;
          final accounts = (data['data'] as List)
              .map((json) => AccountResponce.fromJson(json))
              .toList();
          
          // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –±–∞–∑—É
          await _updateLocalAccounts(accounts);
          return accounts.map(_mapResponseToBrief).toList();
        }
      } catch (e) {
        print('Error fetching accounts from server: $e');
      }
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑—ã
    final localAccounts = await _databaseService.getAllAccounts();
    return localAccounts.map(_mapEntityToBrief).toList();
  }

  Future<AccountResponce> createAccount(AccountCreateRequest request) async {
    final tempId = DateTime.now().millisecondsSinceEpoch;
    
    // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç –ª–æ–∫–∞–ª—å–Ω–æ
    final now = DateTime.now();
    final localAccount = AccountEntity(
      id: tempId,
      name: request.name,
      balance: request.balance,
      currency: request.currency,
      createdAt: now,
      updatedAt: now,
    );
    
    final localId = await _databaseService.addAccount(localAccount);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –±—ç–∫–∞–ø –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    await _backupService.addBackupOperation(
      operationType: BackupOperationType.create,
      dataType: BackupDataType.account,
      originalId: localId,
      data: request.toJson(),
    );

    // –ï—Å–ª–∏ –µ—Å—Ç—å —Å–µ—Ç—å, –ø—ã—Ç–∞–µ–º—Å—è —Å—Ä–∞–∑—É —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å
    if (_networkService.isConnected) {
      await _backupService.syncPendingOperations();
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    final savedAccount = await _databaseService.getAccountById(localId);
    return await _mapEntityToResponse(savedAccount!);
  }

  Future<bool> deleteAccount(int accountId) async {
    // –£–¥–∞–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
    final deleted = await _databaseService.deleteAccount(accountId);
    
    if (deleted) {
      // –î–æ–±–∞–≤–ª—è–µ–º –≤ –±—ç–∫–∞–ø –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
      await _backupService.addBackupOperation(
        operationType: BackupOperationType.delete,
        dataType: BackupDataType.account,
        originalId: accountId,
        data: {'id': accountId},
      );

      // –ï—Å–ª–∏ –µ—Å—Ç—å —Å–µ—Ç—å, –ø—ã—Ç–∞–µ–º—Å—è —Å—Ä–∞–∑—É —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å
      if (_networkService.isConnected) {
        await _backupService.syncPendingOperations();
      }
    }
    
    return deleted;
  }

  Future<AccountHistoryResponce> getHistory(int accountId) async {
    // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ–∂–∏–¥–∞—é—â–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
    if (_networkService.isConnected) {
      await _backupService.syncPendingOperations();
      
      // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å —Å–µ—Ä–≤–µ—Ä–∞
      try {
        final response = await _apiClient.get('/accounts/$accountId/history');
        if (response.statusCode == 200 && response.data != null) {
          final historyData = response.data as Map<String, dynamic>;
          return AccountHistoryResponce.fromJson(historyData);
        }
      } catch (e) {
        print('Error fetching account history from server: $e');
      }
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—É—é –∏—Å—Ç–æ—Ä–∏—é –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑—ã
    final account = await _databaseService.getAccountById(accountId);
    if (account == null) {
      throw Exception('Account not found');
    }

    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    return AccountHistoryResponce(
      accountId: accountId,
      accountName: account.name,
      currency: account.currency,
      currentBalance: account.balance,
      history: _createMockHistory(account),
    );
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –º–∞–ø–ø–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö
  Future<AccountResponce> _mapEntityToResponse(AccountEntity entity) async {
    // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º API –æ–Ω–∏ –¥–æ–ª–∂–Ω—ã –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —Å —Å–µ—Ä–≤–µ—Ä–∞)
    final incomeStats = StatItem(
      categoryId: 1,
      categoryName: '–î–æ—Ö–æ–¥—ã',
      emoji: 'üí∞',
      amount: '0.00',
    );
    
    final expenseStats = StatItem(
      categoryId: 2,
      categoryName: '–†–∞—Å—Ö–æ–¥—ã',
      emoji: 'üí∏',
      amount: '0.00',
    );

    return AccountResponce(
      id: entity.id,
      name: entity.name,
      balance: entity.balance,
      currency: entity.currency,
      incomeStats: incomeStats,
      expenseStats: expenseStats,
      createdAt: entity.createdAt,
      updatedAt: entity.updatedAt,
    );
  }

  AccountBrief _mapEntityToBrief(AccountEntity entity) {
    return AccountBrief(
      id: entity.id,
      name: entity.name,
      balance: entity.balance,
      currency: entity.currency,
    );
  }

  AccountBrief _mapResponseToBrief(AccountResponce response) {
    return AccountBrief(
      id: response.id,
      name: response.name,
      balance: response.balance,
      currency: response.currency,
    );
  }

  Future<void> _saveAccountToLocal(AccountResponce account) async {
    final entity = AccountEntity(
      id: account.id,
      name: account.name,
      balance: account.balance,
      currency: account.currency,
      createdAt: account.createdAt,
      updatedAt: account.updatedAt,
    );
    
    await _databaseService.addAccount(entity);
  }

  Future<void> _updateLocalAccounts(List<AccountResponce> accounts) async {
    for (final account in accounts) {
      await _saveAccountToLocal(account);
    }
  }

  dynamic _createMockHistory(AccountEntity account) {
    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ —ç—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
    return {
      'id': 1,
      'accountId': account.id,
      'changeType': 'MODIFICATION',
      'previousState': {
        'id': 0,
        'name': account.name,
        'balance': '0.00',
        'currency': account.currency,
      },
      'newState': {
        'id': 1,
        'name': account.name,
        'balance': account.balance,
        'currency': account.currency,
      },
      'changeTimestamp': DateTime.now().toIso8601String(),
      'createdAt': DateTime.now().toIso8601String(),
    };
  }
} 