import 'package:finance_app_yandex_smr_2025/core/database/entities/backup_operation_entity.dart';
import 'package:finance_app_yandex_smr_2025/core/database/services/database_service.dart';
import 'package:finance_app_yandex_smr_2025/core/network/api_client.dart';
import 'package:finance_app_yandex_smr_2025/core/network/network_service.dart';
import 'package:finance_app_yandex_smr_2025/core/services/backup_service.dart';
import 'package:finance_app_yandex_smr_2025/features/category/data/models/category.dart';
import 'package:finance_app_yandex_smr_2025/features/category/domain/entity/category_entity.dart';
import 'package:finance_app_yandex_smr_2025/features/category/domain/repositories/category_repository.dart';
import 'package:finance_app_yandex_smr_2025/core/database/entities/category_entity.dart' as db;
import 'dart:developer' as developer;

class NetworkCategoryRepository implements CategoryRepository {
  final DatabaseService _databaseService = DatabaseService.instance;
  final ApiClient _apiClient = ApiClient();
  final NetworkService _networkService = NetworkService();
  final BackupService _backupService = BackupService();

  @override
  Future<List<CategoryEntity>> getAllCategories() async {
    developer.log('üìã –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π', name: 'NetworkCategoryRepository');

    // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ–∂–∏–¥–∞—é—â–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
    if (_networkService.isConnected) {
      developer.log('üì° –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ–∂–∏–¥–∞—é—â–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π', name: 'NetworkCategoryRepository');
      await _backupService.syncPendingOperations();
      
      // –í–°–ï–ì–î–ê –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ä–≤–µ—Ä –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å
      developer.log('üåê –ó–∞–ø—Ä–æ—Å –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å —Å–µ—Ä–≤–µ—Ä–∞: GET /categories', name: 'NetworkCategoryRepository');
      try {
        final response = await _apiClient.get('/categories');
        if (response.statusCode == 200 && response.data != null) {
          developer.log('‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞: ${response.data}', name: 'NetworkCategoryRepository');
          
          // API –º–æ–∂–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –ª–∏–±–æ –º–∞—Å—Å–∏–≤ –Ω–∞–ø—Ä—è–º—É—é, –ª–∏–±–æ –≤ –æ–±–æ–ª–æ—á–∫–µ
          List<dynamic> categoriesData;
          if (response.data is List) {
            categoriesData = response.data as List<dynamic>;
          } else if (response.data is Map && response.data['data'] != null) {
            categoriesData = response.data['data'] as List<dynamic>;
          } else {
            developer.log('‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞', name: 'NetworkCategoryRepository');
            categoriesData = [];
          }
          
                      if (categoriesData.isNotEmpty) {
              developer.log('üìä –ü–æ–ª—É—á–µ–Ω–æ ${categoriesData.length} –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å —Å–µ—Ä–≤–µ—Ä–∞', name: 'NetworkCategoryRepository');
              
              // –ü–∞—Ä—Å–∏–º —Ä–µ–∞–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞
              final List<CategoryEntity> categories = [];
              
              for (final categoryJson in categoriesData) {
                if (categoryJson is Map<String, dynamic>) {
                  try {
                    final category = CategoryEntity(
                      id: categoryJson['id'] ?? 0,
                      name: categoryJson['name'] ?? '–ö–∞—Ç–µ–≥–æ—Ä–∏—è',
                      emoji: categoryJson['emoji'] ?? 'üìù',
                      isIncome: categoryJson['isIncome'] ?? false,
                    );
                    categories.add(category);
                    developer.log('üìù –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ID=${category.id}, ${category.name} ${category.emoji} (–¥–æ—Ö–æ–¥: ${category.isIncome})', name: 'NetworkCategoryRepository');
                  } catch (e) {
                    developer.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: $e', name: 'NetworkCategoryRepository');
                  }
                }
              }
              
              if (categories.isNotEmpty) {
                // –°–Ω–∞—á–∞–ª–∞ –æ—á–∏—â–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –±–∞–∑—É –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                developer.log('üóëÔ∏è –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑—ã', name: 'NetworkCategoryRepository');
                try {
                  // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —É–¥–∞–ª—è–µ–º –∏—Ö
                  final existingCategories = await _databaseService.getAllCategories();
                  for (final existingCategory in existingCategories) {
                    await _databaseService.deleteCategory(existingCategory.id);
                  }
                } catch (e) {
                  developer.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: $e', name: 'NetworkCategoryRepository');
                }
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –±–∞–∑—É –Ω–æ–≤—ã–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
                await _updateLocalCategoriesFromEntities(categories);
                developer.log('üíæ ${categories.length} –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ª–æ–∫–∞–ª—å–Ω—É—é –±–∞–∑—É', name: 'NetworkCategoryRepository');
                return categories;
              }
            } else {
              developer.log('‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π', name: 'NetworkCategoryRepository');
            }
        } else {
          developer.log('‚ùå –°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å: ${response.statusCode}', name: 'NetworkCategoryRepository');
        }
      } catch (e) {
        developer.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å —Å–µ—Ä–≤–µ—Ä–∞: $e', name: 'NetworkCategoryRepository');
      }
    } else {
      developer.log('üìµ –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ç–∏', name: 'NetworkCategoryRepository');
    }

    // –ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –Ω–µ –≤–µ—Ä–Ω—É–ª –¥–∞–Ω–Ω—ã—Ö, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –±–∞–∑—É
    developer.log('üíæ –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑—ã', name: 'NetworkCategoryRepository');
    final localCategories = await _databaseService.getAllCategories();
    
    if (localCategories.isEmpty) {
      developer.log('‚ö†Ô∏è –õ–æ–∫–∞–ª—å–Ω–∞—è –±–∞–∑–∞ –ø—É—Å—Ç–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫', name: 'NetworkCategoryRepository');
      return [];
    }
    
    developer.log('üìä –ù–∞–π–¥–µ–Ω–æ ${localCategories.length} –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ', name: 'NetworkCategoryRepository');
    return localCategories.map(_mapDbEntityToDomainEntity).toList();
  }

  @override
  Future<List<CategoryEntity>> getIncomeCategories() async {
    developer.log('üí∞ –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–æ—Ö–æ–¥–æ–≤', name: 'NetworkCategoryRepository');

    // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –¥–æ—Ö–æ–¥—ã
    final allCategories = await getAllCategories();
    final incomeCategories = allCategories.where((cat) => cat.isIncome).toList();
    
    developer.log('üìä –ù–∞–π–¥–µ–Ω–æ ${incomeCategories.length} –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–æ—Ö–æ–¥–æ–≤', name: 'NetworkCategoryRepository');
    return incomeCategories;
  }

  @override
  Future<List<CategoryEntity>> getExpenseCategories() async {
    developer.log('üí∏ –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ä–∞—Å—Ö–æ–¥–æ–≤', name: 'NetworkCategoryRepository');

    // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º —Ä–∞—Å—Ö–æ–¥—ã
    final allCategories = await getAllCategories();
    final expenseCategories = allCategories.where((cat) => !cat.isIncome).toList();
    
    developer.log('üìä –ù–∞–π–¥–µ–Ω–æ ${expenseCategories.length} –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ä–∞—Å—Ö–æ–¥–æ–≤', name: 'NetworkCategoryRepository');
    return expenseCategories;
  }

  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è CRUD –æ–ø–µ—Ä–∞—Ü–∏–π
  Future<CategoryEntity> createCategory(String name, String emoji, bool isIncome) async {
    // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ª–æ–∫–∞–ª—å–Ω–æ —Å ID = 0 –¥–ª—è –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    final now = DateTime.now();
    final localCategory = db.CategoryEntity(
      id: 0, // –ò—Å–ø–æ–ª—å–∑—É–µ–º 0 –¥–ª—è –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ID –≤ ObjectBox
      name: name,
      emoji: emoji,
      isIncome: isIncome,
      createdAt: now,
      updatedAt: now,
    );
    
    final localId = await _databaseService.addCategory(localCategory);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –±—ç–∫–∞–ø –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    await _backupService.addBackupOperation(
      operationType: BackupOperationType.create,
      dataType: BackupDataType.category,
      originalId: localId,
      data: {
        'name': name,
        'emoji': emoji,
        'isIncome': isIncome,
      },
    );

    // –ï—Å–ª–∏ –µ—Å—Ç—å —Å–µ—Ç—å, –ø—ã—Ç–∞–µ–º—Å—è —Å—Ä–∞–∑—É —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å
    if (_networkService.isConnected) {
      await _backupService.syncPendingOperations();
    }

    return CategoryEntity(
      id: localId,
      name: name,
      emoji: emoji,
      isIncome: isIncome,
    );
  }

  Future<CategoryEntity> updateCategory(int id, String name, String emoji, bool isIncome) async {
    final now = DateTime.now();
    
    // –ù–∞—Ö–æ–¥–∏–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è createdAt
    final existingCategory = await _databaseService.getCategoryById(id);
    if (existingCategory == null) {
      throw Exception('Category not found');
    }
    
    final updatedCategory = db.CategoryEntity(
      id: id,
      name: name,
      emoji: emoji,
      isIncome: isIncome,
      createdAt: existingCategory.createdAt,
      updatedAt: now,
    );
    
    await _databaseService.addCategory(updatedCategory);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –±—ç–∫–∞–ø –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    await _backupService.addBackupOperation(
      operationType: BackupOperationType.update,
      dataType: BackupDataType.category,
      originalId: id,
      data: {
        'name': name,
        'emoji': emoji,
        'isIncome': isIncome,
      },
    );

    // –ï—Å–ª–∏ –µ—Å—Ç—å —Å–µ—Ç—å, –ø—ã—Ç–∞–µ–º—Å—è —Å—Ä–∞–∑—É —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å
    if (_networkService.isConnected) {
      await _backupService.syncPendingOperations();
    }

    return CategoryEntity(
      id: id,
      name: name,
      emoji: emoji,
      isIncome: isIncome,
    );
  }

  Future<bool> deleteCategory(int id) async {
    // –£–¥–∞–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
    final deleted = await _databaseService.deleteCategory(id);
    
    if (deleted) {
      // –î–æ–±–∞–≤–ª—è–µ–º –≤ –±—ç–∫–∞–ø –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
      await _backupService.addBackupOperation(
        operationType: BackupOperationType.delete,
        dataType: BackupDataType.category,
        originalId: id,
        data: {'id': id},
      );

      // –ï—Å–ª–∏ –µ—Å—Ç—å —Å–µ—Ç—å, –ø—ã—Ç–∞–µ–º—Å—è —Å—Ä–∞–∑—É —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å
      if (_networkService.isConnected) {
        await _backupService.syncPendingOperations();
      }
    }
    
    return deleted;
  }

  Future<CategoryEntity?> getCategoryById(int id) async {
    // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ–∂–∏–¥–∞—é—â–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
    if (_networkService.isConnected) {
      await _backupService.syncPendingOperations();
    }

    // –ò—â–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ
    final localCategory = await _databaseService.getCategoryById(id);
    if (localCategory != null) {
      return _mapDbEntityToDomainEntity(localCategory);
    }

    // –ï—Å–ª–∏ –Ω–µ—Ç –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ –∏ –µ—Å—Ç—å —Å–µ—Ç—å, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å —Å–µ—Ä–≤–µ—Ä–∞
    if (_networkService.isConnected) {
      try {
        final response = await _apiClient.get('/categories/$id');
        if (response.statusCode == 200 && response.data != null) {
          final categoryData = response.data as Map<String, dynamic>;
          final category = Category.fromJson(categoryData);
          
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω—É—é –±–∞–∑—É
          await _saveCategoryToLocal(category);
          return category.toEntity();
        }
      } catch (e) {
        print('Error fetching category from server: $e');
      }
    }

    return null;
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –º–∞–ø–ø–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö
  CategoryEntity _mapDbEntityToDomainEntity(db.CategoryEntity dbEntity) {
    return CategoryEntity(
      id: dbEntity.id,
      name: dbEntity.name,
      emoji: dbEntity.emoji,
      isIncome: dbEntity.isIncome,
    );
  }

  Future<void> _saveCategoryToLocal(Category category) async {
    final now = DateTime.now();
    final entity = db.CategoryEntity(
      id: category.id,
      name: category.name,
      emoji: category.emoji,
      isIncome: category.isIncome,
      createdAt: now,
      updatedAt: now,
    );
    
    await _databaseService.addCategory(entity);
  }

  Future<void> _updateLocalCategories(List<Category> categories) async {
    for (final category in categories) {
      await _saveCategoryToLocal(category);
    }
  }

  Future<void> _updateLocalCategoriesFromEntities(List<CategoryEntity> categories) async {
    for (final category in categories) {
      final now = DateTime.now();
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Å —Ç–∞–∫–∏–º ID
      final existingCategory = await _databaseService.getCategoryById(category.id);
      
      final dbEntity = db.CategoryEntity(
        id: existingCategory != null ? category.id : 0, // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π ID –µ—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∏–Ω–∞—á–µ 0
        name: category.name,
        emoji: category.emoji,
        isIncome: category.isIncome,
        createdAt: existingCategory?.createdAt ?? now,
        updatedAt: now,
      );
      
      try {
        await _databaseService.addCategory(dbEntity);
        developer.log('‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: ID=${category.id}, ${category.name}', name: 'NetworkCategoryRepository');
      } catch (e) {
        developer.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${category.name}: $e', name: 'NetworkCategoryRepository');
        
        // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ —Å ID, –ø—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
        try {
          final newDbEntity = db.CategoryEntity(
            id: 0, // –ê–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è ID
            name: category.name,
            emoji: category.emoji,
            isIncome: category.isIncome,
            createdAt: now,
            updatedAt: now,
          );
          await _databaseService.addCategory(newDbEntity);
          developer.log('‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å–æ–∑–¥–∞–Ω–∞ —Å –Ω–æ–≤—ã–º ID: ${category.name}', name: 'NetworkCategoryRepository');
        } catch (e2) {
          developer.log('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${category.name}: $e2', name: 'NetworkCategoryRepository');
        }
      }
    }
  }


} 