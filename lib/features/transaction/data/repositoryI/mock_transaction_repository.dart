import 'dart:async';

import 'package:finance_app_yandex_smr_2025/features/account/data/models/account_brief/account_brief.dart';
import 'package:finance_app_yandex_smr_2025/features/category/data/models/category.dart';
import 'package:finance_app_yandex_smr_2025/features/transaction/data/models/transaction/transaction_request/transaction_request.dart';
import 'package:finance_app_yandex_smr_2025/features/transaction/data/models/transaction/transaction_responce/transaction_responce.dart';
import 'package:finance_app_yandex_smr_2025/features/transaction/domain/repository/transaction_repository.dart';

class MockTransactionRepository implements TransactionRepository {
  static final MockTransactionRepository _instance = MockTransactionRepository._internal();
  static MockTransactionRepository get instance => _instance;
  
  final Map<int, TransactionResponce> _transactions = {};
  int _nextId = 1;
  double _currentBalance = 0.0;

  // –°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ä–∞—Å—Ö–æ–¥–æ–≤ —Å —ç–º–æ–¥–∑–∏
  final List<(String, String)> _expenseCategories = [
    ('–ö–æ–º–∏–∫—Å-—à–æ–ø', 'üìö'),
    ('–ó–æ–æ–º–∞–≥–∞–∑–∏–Ω', 'üêæ'),
    ('–ö–æ—Ñ–µ–π–Ω—è', '‚òï'),
    ('–ö–∏–Ω–æ—Ç–µ–∞—Ç—Ä', 'üé¨'),
    ('–ö–Ω–∏–∂–Ω—ã–π', 'üìñ'),
    ('–ò–≥—Ä–æ–≤–æ–π –º–∞–≥–∞–∑–∏–Ω', 'üéÆ'),
    ('–ü–∏—Ü—Ü–µ—Ä–∏—è', 'üçï'),
    ('–°—É—à–∏-–±–∞—Ä', 'üç±'),
    ('–°–ø–æ—Ä—Ç–∑–∞–ª', 'üèãÔ∏è'),
    ('–ú–∞–≥–∞–∑–∏–Ω –º—É–∑—ã–∫–∏', 'üéµ'),
  ];

  // –°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–æ—Ö–æ–¥–æ–≤ —Å —ç–º–æ–¥–∑–∏
  final List<(String, String)> _incomeCategories = [
    ('–ó–∞—Ä–ø–ª–∞—Ç–∞', 'üí∞'),
    ('–§—Ä–∏–ª–∞–Ω—Å', 'üíª'),
    ('–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏', 'üìà'),
    ('–ü–æ–¥—Ä–∞–±–æ—Ç–∫–∞', 'üíº'),
  ];

  MockTransactionRepository._internal() {
    _initializeWithMockData();
  }
  
  factory MockTransactionRepository() => _instance;

  // –ù–∞—Ö–æ–¥–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ ID, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º (name, emoji, isIncome)
  (String, String, bool)? _findCategoryById(int categoryId) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ—Ö–æ–¥–æ–≤
    for (int i = 0; i < _incomeCategories.length; i++) {
      if (categoryId == i + 1) { // ID –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å 1
        return (_incomeCategories[i].$1, _incomeCategories[i].$2, true);
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤
    for (int i = 0; i < _expenseCategories.length; i++) {
      if (categoryId == i + 5) { // ID —Ä–∞—Å—Ö–æ–¥–æ–≤ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å 5
        return (_expenseCategories[i].$1, _expenseCategories[i].$2, false);
      }
    }
    
    return null;
  }

  void _updateBalance(double amount, bool isIncome, {bool isAdding = true}) {
    if (isAdding) {
      // –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
      if (isIncome) {
        _currentBalance += amount;
      } else {
        _currentBalance -= amount;
      }
    } else {
      // –£–¥–∞–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
      if (isIncome) {
        _currentBalance -= amount;
      } else {
        _currentBalance += amount;
      }
    }
  }

  void _updateAllAccountBalances() {
    // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –≤–æ –≤—Å–µ—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö
    for (final transaction in _transactions.values) {
      final updatedAccount = AccountBrief(
        id: transaction.account.id,
        name: transaction.account.name,
        balance: _currentBalance.toStringAsFixed(2),
        currency: transaction.account.currency,
      );
      
      _transactions[transaction.id] = transaction.copyWith(account: updatedAccount);
    }
  }

  void _initializeWithMockData() {
    final now = DateTime.now();
    final lastDayOfMonth = DateTime(now.year, now.month + 1, 0).day;
    _currentBalance = 0.0; // –ù–∞—á–∏–Ω–∞–µ–º —Å –Ω—É–ª–µ–≤–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∑–∞ –≤–µ—Å—å –º–µ—Å—è—Ü
    for (int day = 1; day <= lastDayOfMonth; day++) {
      final date = DateTime(now.year, now.month, day);
      final isIncome = day % 6 == 0 || day % 9 == 0; // –¢–µ –∂–µ —É—Å–ª–æ–≤–∏—è, —á—Ç–æ –∏ –≤ BalanceData
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—É–º–º—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
      final base = isIncome ? 35000.0 : 12000.0;
      final variation = isIncome ? 20000.0 : 15000.0;
      final mod = (day % 8) - 4;
      final amount = base + variation * mod.abs() / 4;
      
      // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞
      final categoryIndex = day % (isIncome ? _incomeCategories.length : _expenseCategories.length);
      final (categoryName, categoryEmoji) = isIncome 
          ? _incomeCategories[categoryIndex]
          : _expenseCategories[categoryIndex];
      
      // –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
      final category = Category(
        id: _nextId,
        name: categoryName,
        emoji: categoryEmoji,
        isIncome: isIncome,
      );
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å (–¥–æ—Ö–æ–¥—ã –¥–æ–±–∞–≤–ª—è–µ–º, —Ä–∞—Å—Ö–æ–¥—ã –≤—ã—á–∏—Ç–∞–µ–º)
      if (isIncome) {
        _currentBalance += amount;
      } else {
        _currentBalance -= amount;
      }
      
      // –°–æ–∑–¥–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      String? comment;
      if (!isIncome) {
        switch (categoryName) {
          case '–ö–æ–º–∏–∫—Å-—à–æ–ø':
            comment = '–ù–æ–≤—ã–π –≤—ã–ø—É—Å–∫ –ß–µ–ª–æ–≤–µ–∫–∞-–ø–∞—É–∫–∞';
            break;
          case '–ó–æ–æ–º–∞–≥–∞–∑–∏–Ω':
            comment = '–ö–æ—Ä–º –∏ –∏–≥—Ä—É—à–∫–∏ –¥–ª—è –ø–∏—Ç–æ–º—Ü–∞';
            break;
          case '–ö–æ—Ñ–µ–π–Ω—è':
            comment = '–õ–∞—Ç—Ç–µ –∏ –∫—Ä—É–∞—Å—Å–∞–Ω';
            break;
          case '–ö–∏–Ω–æ—Ç–µ–∞—Ç—Ä':
            comment = '–ë–∏–ª–µ—Ç—ã –Ω–∞ –ø—Ä–µ–º—å–µ—Ä—É';
            break;
          case '–ö–Ω–∏–∂–Ω—ã–π':
            comment = '–ù–æ–≤–∏–Ω–∫–∏ —Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∏';
            break;
          case '–ò–≥—Ä–æ–≤–æ–π –º–∞–≥–∞–∑–∏–Ω':
            comment = '–ü—Ä–µ–¥–∑–∞–∫–∞–∑ –Ω–æ–≤–æ–π –∏–≥—Ä—ã';
            break;
          case '–ü–∏—Ü—Ü–µ—Ä–∏—è':
            comment = '–ü–∏—Ü—Ü–∞ —Å –¥—Ä—É–∑—å—è–º–∏';
            break;
          case '–°—É—à–∏-–±–∞—Ä':
            comment = '–†–æ–ª–ª—ã –Ω–∞ —É–∂–∏–Ω';
            break;
          case '–°–ø–æ—Ä—Ç–∑–∞–ª':
            comment = '–ú–µ—Å—è—á–Ω—ã–π –∞–±–æ–Ω–µ–º–µ–Ω—Ç';
            break;
          case '–ú–∞–≥–∞–∑–∏–Ω –º—É–∑—ã–∫–∏':
            comment = '–í–∏–Ω–∏–ª–æ–≤—ã–µ –ø–ª–∞—Å—Ç–∏–Ω–∫–∏';
            break;
        }
      } else {
        switch (categoryName) {
          case '–ó–∞—Ä–ø–ª–∞—Ç–∞':
            comment = '–ï–∂–µ–º–µ—Å—è—á–Ω–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞';
            break;
          case '–§—Ä–∏–ª–∞–Ω—Å':
            comment = '–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞';
            break;
          case '–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏':
            comment = '–î–∏–≤–∏–¥–µ–Ω–¥—ã';
            break;
          case '–ü–æ–¥—Ä–∞–±–æ—Ç–∫–∞':
            comment = '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞';
            break;
        }
      }
      
      // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
      _transactions[_nextId] = TransactionResponce(
        id: _nextId,
        account: AccountBrief(
          id: 1,
          name: '–û—Å–Ω–æ–≤–Ω–æ–π —Å—á–µ—Ç',
          balance: _currentBalance.toStringAsFixed(2),
          currency: 'RUB',
        ),
        category: category,
        amount: amount.toStringAsFixed(2),
        transactionDate: date.add(Duration(hours: 9 + day % 12)), // –†–∞–∑–Ω–æ–µ –≤—Ä–µ–º—è –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è
        comment: comment,
        createdAt: date,
        updatedAt: date,
      );
      
      _nextId++;
    }
  }

  @override
  Future<TransactionResponce?> getTransactionById(int transactionId) async {
    await Future.delayed(const Duration(milliseconds: 300));
    return _transactions[transactionId];
  }

  Future<List<TransactionResponce>> getAllTransactions() async {
    await Future.delayed(const Duration(milliseconds: 500));
    return _transactions.values.toList();
  }

  Future<List<TransactionResponce>> getTransactionsByDateAndType({
    required DateTime dateFrom,
    required DateTime dateTo,
    required bool isIncome,
  }) async {
    await Future.delayed(const Duration(milliseconds: 500));
    
    return _transactions.values.where((transaction) {
      final isInDateRange = transaction.transactionDate.isAfter(dateFrom.subtract(const Duration(seconds: 1))) &&
          transaction.transactionDate.isBefore(dateTo.add(const Duration(seconds: 1)));
      final isCorrectType = transaction.category.isIncome == isIncome;
      return isInDateRange && isCorrectType;
    }).toList();
  }

  @override
  Future<TransactionResponce> addTransaction(TransactionRequest request) async {
    await Future.delayed(const Duration(milliseconds: 500));

    // –ù–∞—Ö–æ–¥–∏–º —Ä–µ–∞–ª—å–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ ID
    final categoryData = _findCategoryById(request.categoryId);
    if (categoryData == null) {
      throw Exception('Category with id ${request.categoryId} not found');
    }

    final now = DateTime.now();
    // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
    final amount = double.parse(request.amount);
    _updateBalance(amount, categoryData.$3);

    final newTransaction = TransactionResponce(
      id: _nextId++,
      account: AccountBrief(
        id: request.accountId,
        name: '–û—Å–Ω–æ–≤–Ω–æ–π —Å—á–µ—Ç',
        currency: 'RUB',
        balance: _currentBalance.toStringAsFixed(2),
      ),
      category: Category(
        id: request.categoryId,
        name: categoryData.$1,
        emoji: categoryData.$2,
        isIncome: categoryData.$3,
      ),
      amount: request.amount,
      transactionDate: request.transactionDate,
      comment: request.comment,
      createdAt: now,
      updatedAt: now,
    );

    _transactions[newTransaction.id] = newTransaction;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –≤–æ –≤—Å–µ—Ö —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö
    _updateAllAccountBalances();
    
    return newTransaction;
  }

  @override
  Future<TransactionResponce> updateTransaction(
    int transactionId,
    TransactionRequest request,
  ) async {
    await Future.delayed(const Duration(milliseconds: 400));

    final existingTransaction = _transactions[transactionId];
    if (existingTransaction == null) {
      throw Exception('Transaction with id $transactionId not found');
    }

    // –ù–∞—Ö–æ–¥–∏–º —Ä–µ–∞–ª—å–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ ID
    final categoryData = _findCategoryById(request.categoryId);
    if (categoryData == null) {
      throw Exception('Category with id ${request.categoryId} not found');
    }

    // –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ä—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é
    final oldAmount = double.parse(existingTransaction.amount);
    final newAmount = double.parse(request.amount);
    
    // –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ä—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    _updateBalance(oldAmount, existingTransaction.category.isIncome, isAdding: false);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    _updateBalance(newAmount, categoryData.$3, isAdding: true);

    final updatedTransaction = existingTransaction.copyWith(
      account: AccountBrief(
        id: request.accountId,
        name: '–û—Å–Ω–æ–≤–Ω–æ–π —Å—á–µ—Ç',
        currency: 'RUB',
        balance: _currentBalance.toStringAsFixed(2),
      ),
      category: Category(
        id: request.categoryId,
        name: categoryData.$1,
        emoji: categoryData.$2,
        isIncome: categoryData.$3,
      ),
      amount: request.amount,
      transactionDate: request.transactionDate,
      comment: request.comment,
      updatedAt: DateTime.now(),
    );

    _transactions[transactionId] = updatedTransaction;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –≤–æ –≤—Å–µ—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö
    _updateAllAccountBalances();
    
    return updatedTransaction;
  }

  @override
  Future<bool> deleteTransaction(int transactionId) async {
    await Future.delayed(const Duration(milliseconds: 300));
    
    final transaction = _transactions[transactionId];
    if (transaction != null) {
      // –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –±–∞–ª–∞–Ω—Å
      final amount = double.parse(transaction.amount);
      _updateBalance(amount, transaction.category.isIncome, isAdding: false);
      
      // –£–¥–∞–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
      _transactions.remove(transactionId);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –≤–æ –≤—Å–µ—Ö –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö
      _updateAllAccountBalances();
      
      return true;
    }
    
    return false;
  }
}