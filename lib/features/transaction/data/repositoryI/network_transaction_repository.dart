import 'package:finance_app_yandex_smr_2025/core/database/entities/backup_operation_entity.dart';
import 'package:finance_app_yandex_smr_2025/core/database/services/database_service.dart';
import 'package:finance_app_yandex_smr_2025/core/network/api_client.dart';
import 'package:finance_app_yandex_smr_2025/core/network/network_service.dart';
import 'package:finance_app_yandex_smr_2025/core/services/backup_service.dart';
import 'package:finance_app_yandex_smr_2025/features/transaction/data/models/transaction/transaction_request/transaction_request.dart';
import 'package:finance_app_yandex_smr_2025/features/transaction/data/models/transaction/transaction_responce/transaction_responce.dart';
import 'package:finance_app_yandex_smr_2025/features/transaction/domain/repository/transaction_repository.dart';
import 'package:finance_app_yandex_smr_2025/core/database/entities/transaction_entity.dart';
import 'package:finance_app_yandex_smr_2025/core/database/entities/account_entity.dart';
import 'package:finance_app_yandex_smr_2025/core/database/entities/category_entity.dart';
import 'package:finance_app_yandex_smr_2025/features/account/data/models/account_brief/account_brief.dart';
import 'package:finance_app_yandex_smr_2025/features/category/data/models/category.dart';
import 'package:finance_app_yandex_smr_2025/features/category/data/repositoryI/network_category_repository.dart';
import 'package:finance_app_yandex_smr_2025/features/account/data/repositoryI/network_bank_account_repository.dart';
import 'dart:developer' as developer;

class NetworkTransactionRepository implements TransactionRepository {
  final DatabaseService _databaseService = DatabaseService.instance;
  final ApiClient _apiClient = ApiClient();
  final NetworkService _networkService = NetworkService();
  final BackupService _backupService = BackupService();
  final NetworkBankAccountRepository _accountRepository = NetworkBankAccountRepository();
  
  static bool _initialized = false;
  
  Future<void> _ensureInitialized() async {
    if (_initialized) return;
    
    developer.log('üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è NetworkTransactionRepository', name: 'NetworkTransactionRepository');
    // –ü—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ –æ—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
    await _backupService.clearAllPendingOperations();
    _initialized = true;
  }

  @override
  Future<TransactionResponce?> getTransactionById(int transactionId) async {
    developer.log(
      'üîç –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ ID: $transactionId',
      name: 'NetworkTransactionRepository',
    );

    // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ–∂–∏–¥–∞—é—â–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
    if (_networkService.isConnected) {
      developer.log('üì° –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ–∂–∏–¥–∞—é—â–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π', name: 'NetworkTransactionRepository');
      await _backupService.syncPendingOperations();
    }

    // –ò—â–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ
    developer.log('üíæ –ü–æ–∏—Å–∫ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ', name: 'NetworkTransactionRepository');
    final localTransaction = await _databaseService.getTransactionById(transactionId);
    if (localTransaction != null) {
      developer.log('‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ', name: 'NetworkTransactionRepository');
      return await _mapEntityToResponse(localTransaction);
    }

    // –ï—Å–ª–∏ –Ω–µ—Ç –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ –∏ –µ—Å—Ç—å —Å–µ—Ç—å, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å —Å–µ—Ä–≤–µ—Ä–∞
    if (_networkService.isConnected) {
      developer.log('üåê –ó–∞–ø—Ä–æ—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞', name: 'NetworkTransactionRepository');
      try {
        final response = await _apiClient.get('/transactions/$transactionId');
        if (response.statusCode == 200 && response.data != null) {
          final transactionData = response.data as Map<String, dynamic>;
          final transactionResponse = TransactionResponce.fromJson(transactionData);
          
          developer.log('‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ', name: 'NetworkTransactionRepository');
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω—É—é –±–∞–∑—É
          await _saveTransactionToLocal(transactionResponse);
          return transactionResponse;
        }
      } catch (e) {
        developer.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞: $e', name: 'NetworkTransactionRepository');
      }
    } else {
      developer.log('üìµ –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ç–∏', name: 'NetworkTransactionRepository');
    }

    developer.log('‚ùå –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', name: 'NetworkTransactionRepository');
    return null;
  }



  @override
  Future<List<TransactionResponce>> getTransactionsByDateAndType({
    required DateTime dateFrom,
    required DateTime dateTo,
    required bool isIncome,
  }) async {
    await _ensureInitialized();
    
    developer.log(
      'üîç –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ –ø–µ—Ä–∏–æ–¥: ${dateFrom.toLocal()} - ${dateTo.toLocal()}, isIncome: $isIncome',
      name: 'NetworkTransactionRepository',
    );

    // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ–∂–∏–¥–∞—é—â–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
    if (_networkService.isConnected) {
      developer.log('üì° –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ–∂–∏–¥–∞—é—â–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π', name: 'NetworkTransactionRepository');
      await _backupService.syncPendingOperations();

      // –ö–†–ò–¢–ò–ß–ù–û: –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —á–µ—Ä–µ–∑ CategoryRepository
      developer.log('üìã –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —á–µ—Ä–µ–∑ CategoryRepository', name: 'NetworkTransactionRepository');
      try {
        // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º CategoryRepository –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        final categoryRepository = NetworkCategoryRepository();
        final categories = await categoryRepository.getAllCategories();
        developer.log('üìä –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω–æ ${categories.length} –∫–∞—Ç–µ–≥–æ—Ä–∏–π', name: 'NetworkTransactionRepository');
      } catch (e) {
        developer.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —á–µ—Ä–µ–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: $e', name: 'NetworkTransactionRepository');
      }

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
      developer.log('üíæ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –±–∞–∑—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π', name: 'NetworkTransactionRepository');
    } else {
      developer.log('üìµ –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ç–∏', name: 'NetworkTransactionRepository');
    }

    // –ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø–æ–ª—É—á–∞–µ–º –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑—ã —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
    developer.log('üíæ –ü–æ–∏—Å–∫ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ', name: 'NetworkTransactionRepository');
    final localTransactions = await _databaseService.getTransactionsByDateRange(
      startDate: dateFrom,
      endDate: dateTo,
      isIncome: isIncome,
    );

    developer.log('üìä –ù–∞–π–¥–µ–Ω–æ ${localTransactions.length} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ', name: 'NetworkTransactionRepository');
    return await Future.wait(localTransactions.map(_mapEntityToResponse));
  }

  @override
  Future<TransactionResponce> addTransaction(TransactionRequest request) async {
    await _ensureInitialized();
    
    developer.log(
      '‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: ${request.amount} ${request.transactionDate}',
      name: 'NetworkTransactionRepository',
    );
    
    // –°–Ω–∞—á–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ —Å ID = 0 –¥–ª—è –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    developer.log('üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ª–æ–∫–∞–ª—å–Ω–æ', name: 'NetworkTransactionRepository');
    final entity = _mapRequestToEntity(request, 0); // –ò—Å–ø–æ–ª—å–∑—É–µ–º 0 –¥–ª—è –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ID
    final localId = await _databaseService.addTransaction(entity);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –±—ç–∫–∞–ø –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    developer.log('üìã –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏', name: 'NetworkTransactionRepository');
    await _backupService.addBackupOperation(
      operationType: BackupOperationType.create,
      dataType: BackupDataType.transaction,
      originalId: localId,
      data: request.toJson(),
    );

    // –ï—Å–ª–∏ –µ—Å—Ç—å —Å–µ—Ç—å, –ø—ã—Ç–∞–µ–º—Å—è —Å—Ä–∞–∑—É —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å
    if (_networkService.isConnected) {
      developer.log('üì° –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º', name: 'NetworkTransactionRepository');
      final syncSuccess = await _backupService.syncPendingOperations();
      
      // –ï—Å–ª–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ, –æ–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
      if (syncSuccess) {
        developer.log('üí∞ –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏', name: 'NetworkTransactionRepository');
        try {
          await _accountRepository.refreshBalance(request.accountId);
          developer.log('‚úÖ –ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω', name: 'NetworkTransactionRepository');
        } catch (e) {
          developer.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞: $e', name: 'NetworkTransactionRepository');
        }
      }
    } else {
      developer.log('üìµ –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ç–∏, —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ—Ç–ª–æ–∂–µ–Ω–∞', name: 'NetworkTransactionRepository');
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    final savedEntity = await _databaseService.getTransactionById(localId);
    developer.log('‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞ —Å ID: $localId', name: 'NetworkTransactionRepository');
    return await _mapEntityToResponse(savedEntity!);
  }

  @override
  Future<TransactionResponce> updateTransaction(
    int transactionId,
    TransactionRequest request,
  ) async {
    developer.log(
      '‚úèÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ ID: $transactionId',
      name: 'NetworkTransactionRepository',
    );

    // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
    developer.log('üíæ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ª–æ–∫–∞–ª—å–Ω–æ', name: 'NetworkTransactionRepository');
    final entity = _mapRequestToEntity(request, transactionId);
    await _databaseService.addTransaction(entity);

    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –±—ç–∫–∞–ø –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    developer.log('üìã –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏', name: 'NetworkTransactionRepository');
    await _backupService.addBackupOperation(
      operationType: BackupOperationType.update,
      dataType: BackupDataType.transaction,
      originalId: transactionId,
      data: request.toJson(),
    );

    // –ï—Å–ª–∏ –µ—Å—Ç—å —Å–µ—Ç—å, –ø—ã—Ç–∞–µ–º—Å—è —Å—Ä–∞–∑—É —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å
    if (_networkService.isConnected) {
      developer.log('üì° –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º', name: 'NetworkTransactionRepository');
      final syncSuccess = await _backupService.syncPendingOperations();
      
      // –ï—Å–ª–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ, –æ–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
      if (syncSuccess) {
        developer.log('üí∞ –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏', name: 'NetworkTransactionRepository');
        try {
          await _accountRepository.refreshBalance(request.accountId);
          developer.log('‚úÖ –ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω', name: 'NetworkTransactionRepository');
        } catch (e) {
          developer.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞: $e', name: 'NetworkTransactionRepository');
        }
      }
    } else {
      developer.log('üìµ –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ç–∏, —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ—Ç–ª–æ–∂–µ–Ω–∞', name: 'NetworkTransactionRepository');
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    final updatedEntity = await _databaseService.getTransactionById(transactionId);
    developer.log('‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞', name: 'NetworkTransactionRepository');
    return await _mapEntityToResponse(updatedEntity!);
  }

  @override
  Future<bool> deleteTransaction(int transactionId) async {
    developer.log(
      'üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ ID: $transactionId',
      name: 'NetworkTransactionRepository',
    );

    // –£–¥–∞–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
    developer.log('üíæ –£–¥–∞–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ª–æ–∫–∞–ª—å–Ω–æ', name: 'NetworkTransactionRepository');
    final deleted = await _databaseService.deleteTransaction(transactionId);
    
    if (deleted) {
      developer.log('üìã –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏', name: 'NetworkTransactionRepository');
      // –î–æ–±–∞–≤–ª—è–µ–º –≤ –±—ç–∫–∞–ø –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
      await _backupService.addBackupOperation(
        operationType: BackupOperationType.delete,
        dataType: BackupDataType.transaction,
        originalId: transactionId,
        data: {'id': transactionId},
      );

      // –ï—Å–ª–∏ –µ—Å—Ç—å —Å–µ—Ç—å, –ø—ã—Ç–∞–µ–º—Å—è —Å—Ä–∞–∑—É —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å
      if (_networkService.isConnected) {
        developer.log('üì° –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º', name: 'NetworkTransactionRepository');
        final syncSuccess = await _backupService.syncPendingOperations();
        
        // –ï—Å–ª–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ, –æ–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
        if (syncSuccess) {
          developer.log('üí∞ –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏', name: 'NetworkTransactionRepository');
          try {
            // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É–¥–∞–ª–µ–Ω–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Å—á–µ—Ç–∞
            // –ü–æ—Å–∫–æ–ª—å–∫—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É–∂–µ —É–¥–∞–ª–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ —Å—á–µ—Ç–∞
            final accounts = await _databaseService.getAllAccounts();
            if (accounts.isNotEmpty) {
              await _accountRepository.refreshBalance(accounts.first.id);
              developer.log('‚úÖ –ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω', name: 'NetworkTransactionRepository');
            }
          } catch (e) {
            developer.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞: $e', name: 'NetworkTransactionRepository');
          }
        }
      } else {
        developer.log('üìµ –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ç–∏, —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ—Ç–ª–æ–∂–µ–Ω–∞', name: 'NetworkTransactionRepository');
      }
      
      developer.log('‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞', name: 'NetworkTransactionRepository');
    } else {
      developer.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏', name: 'NetworkTransactionRepository');
    }
    
    return deleted;
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –º–∞–ø–ø–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö
  Future<TransactionResponce> _mapEntityToResponse(TransactionEntity entity) async {
    developer.log('üîÑ –ú–∞–ø–ø–∏–Ω–≥ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ ID: ${entity.id}, accountId: ${entity.accountId}, categoryId: ${entity.categoryId}', name: 'NetworkTransactionRepository');
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å—É—â–Ω–æ—Å—Ç–∏ - —Å–Ω–∞—á–∞–ª–∞ –ø–æ ID, –ø–æ—Ç–æ–º –ø–æ –¥—Ä—É–≥–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º
    AccountEntity? accountEntity = await _databaseService.getAccountById(entity.accountId);
    
    // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ ID, –∏—â–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π —Å—á–µ—Ç
    if (accountEntity == null) {
      final allAccounts = await _databaseService.getAllAccounts();
      if (allAccounts.isNotEmpty) {
        accountEntity = allAccounts.first;
        developer.log('‚ö†Ô∏è –°—á–µ—Ç ${entity.accountId} –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ ID, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π: ${accountEntity.name}', name: 'NetworkTransactionRepository');
      }
    }
    
    CategoryEntity? categoryEntity = await _databaseService.getCategoryById(entity.categoryId);
    
    // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ ID, –∏—â–µ–º —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    if (categoryEntity == null) {
      final allCategories = await _databaseService.getAllCategories();
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ —Å—É–º–º–µ
      final amount = double.tryParse(entity.amount) ?? 0.0;
      final isIncome = amount > 0;
      
      // –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ —Ç–∏–ø—É
      for (final cat in allCategories) {
        if (cat.isIncome == isIncome) {
          categoryEntity = cat;
          developer.log('‚ö†Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è ${entity.categoryId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ ID, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–¥—Ö–æ–¥—è—â—É—é: ${cat.name}', name: 'NetworkTransactionRepository');
          break;
        }
      }
    }
    
    // –ï—Å–ª–∏ —Å—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π
    if (accountEntity == null) {
      developer.log('‚ö†Ô∏è –°—á–µ—Ç ${entity.accountId} –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ ${entity.id}', name: 'NetworkTransactionRepository');
      accountEntity = AccountEntity(
        id: 0, // –ò—Å–ø–æ–ª—å–∑—É–µ–º 0 –¥–ª—è –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ID –≤ ObjectBox
        name: '–°—á–µ—Ç ${entity.accountId}',
        balance: '0.00',
        currency: 'RUB',
        createdAt: DateTime.now(),
        updatedAt: DateTime.now(),
      );
      final newAccountId = await _databaseService.addAccount(accountEntity);
      accountEntity = await _databaseService.getAccountById(newAccountId);
      if (accountEntity == null) {
        throw Exception('Failed to create account for transaction ${entity.id}');
      }
    }

    // –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é
    if (categoryEntity == null) {
      developer.log('‚ö†Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è ${entity.categoryId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ ${entity.id}', name: 'NetworkTransactionRepository');
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ —Å—É–º–º–µ (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è = –¥–æ—Ö–æ–¥)
      final amount = double.tryParse(entity.amount) ?? 0.0;
      final isIncome = amount > 0;
      
      categoryEntity = CategoryEntity(
        id: 0, // –ò—Å–ø–æ–ª—å–∑—É–µ–º 0 –¥–ª—è –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ID –≤ ObjectBox
        name: isIncome ? '–î–æ—Ö–æ–¥' : '–†–∞—Å—Ö–æ–¥',
        emoji: isIncome ? 'üí∞' : 'üí∏',
        isIncome: isIncome,
        createdAt: DateTime.now(),
        updatedAt: DateTime.now(),
      );
      final newCategoryId = await _databaseService.addCategory(categoryEntity);
      categoryEntity = await _databaseService.getCategoryById(newCategoryId);
      if (categoryEntity == null) {
        throw Exception('Failed to create category for transaction ${entity.id}');
      }
    }

    developer.log('‚úÖ –ú–∞–ø–ø–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ ${entity.id}', name: 'NetworkTransactionRepository');
    return TransactionResponce(
      id: entity.id,
      account: _mapAccountEntityToBrief(accountEntity),
      category: _mapCategoryEntityToModel(categoryEntity),
      amount: entity.amount,
      transactionDate: entity.transactionDate,
      comment: entity.comment,
      createdAt: entity.createdAt,
      updatedAt: entity.updatedAt,
    );
  }

  TransactionEntity _mapRequestToEntity(TransactionRequest request, int id) {
    final now = DateTime.now();
    
    final entity = TransactionEntity(
      id: id,
      amount: request.amount,
      transactionDate: request.transactionDate,
      comment: request.comment,
      createdAt: now,
      updatedAt: now,
    );
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º ID –¥–ª—è —Å–≤—è–∑–µ–π - —ç—Ç–æ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤ DatabaseService
    entity.accountId = request.accountId;
    entity.categoryId = request.categoryId;
    
    developer.log('üîó –°–æ–∑–¥–∞–Ω–∞ TransactionEntity: ID=$id, accountId=${request.accountId}, categoryId=${request.categoryId}', name: 'NetworkTransactionRepository');
    
    return entity;
  }

  Future<void> _saveTransactionToLocal(TransactionResponce transaction) async {
    final entity = TransactionEntity(
      id: transaction.id,
      amount: transaction.amount,
      transactionDate: transaction.transactionDate,
      comment: transaction.comment,
      createdAt: transaction.createdAt,
      updatedAt: transaction.updatedAt,
    );
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º ID –¥–ª—è —Å–≤—è–∑–µ–π
    entity.accountId = transaction.account.id;
    entity.categoryId = transaction.category.id;
    
    developer.log('üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ: TransactionID=${transaction.id}, accountId=${transaction.account.id}, categoryId=${transaction.category.id}', name: 'NetworkTransactionRepository');
    
    await _databaseService.addTransaction(entity);
  }



  AccountBrief _mapAccountEntityToBrief(AccountEntity accountEntity) {
    return AccountBrief(
      id: accountEntity.id,
      name: accountEntity.name,
      balance: accountEntity.balance,
      currency: accountEntity.currency,
    );
  }

  Category _mapCategoryEntityToModel(CategoryEntity categoryEntity) {
    return Category(
      id: categoryEntity.id,
      name: categoryEntity.name,
      emoji: categoryEntity.emoji,
      isIncome: categoryEntity.isIncome,
    );
  }

  /// –ü–∞—Ä—Å–∏–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —Å —Å–µ—Ä–≤–µ—Ä–∞ –≤ TransactionResponce
  Future<TransactionResponce?> _parseServerTransactionToResponse(Map<String, dynamic> transactionJson) async {
    try {
      final transactionId = transactionJson['id'];
      final accountId = transactionJson['accountId'];
      final categoryId = transactionJson['categoryId'];
      final amount = transactionJson['amount']?.toString() ?? '0.00';
      final transactionDate = DateTime.parse(transactionJson['transactionDate'] ?? DateTime.now().toIso8601String());
      final comment = transactionJson['comment']?.toString();
      final createdAt = DateTime.parse(transactionJson['createdAt'] ?? DateTime.now().toIso8601String());
      final updatedAt = DateTime.parse(transactionJson['updatedAt'] ?? DateTime.now().toIso8601String());

      // –ü–æ–ª—É—á–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å—É—â–Ω–æ—Å—Ç–∏
      AccountEntity? accountEntity = await _databaseService.getAccountById(accountId);
      
      // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ ID
      CategoryEntity? categoryEntity = await _databaseService.getCategoryById(categoryId);
      
      // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ ID, –∏—â–µ–º —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ —Å–µ—Ä–≤–µ—Ä–Ω–æ–º—É ID —á–µ—Ä–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏–ª–∏ –¥—Ä—É–≥–∏–º —Å–ø–æ—Å–æ–±–æ–º
      if (categoryEntity == null) {
        developer.log('‚ö†Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å ID $categoryId –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—â–µ–º —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π', name: 'NetworkTransactionRepository');
        final allCategories = await _databaseService.getAllCategories();
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ —Å—É–º–º–µ (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è = –¥–æ—Ö–æ–¥)
        final isIncome = double.tryParse(amount) != null && double.parse(amount) > 0;
        
        // –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ —Ç–∏–ø—É (–¥–æ—Ö–æ–¥/—Ä–∞—Å—Ö–æ–¥)
        for (final cat in allCategories) {
          if (cat.isIncome == isIncome) {
            categoryEntity = cat;
            developer.log('‚úÖ –ù–∞–π–¥–µ–Ω–∞ –ø–æ–¥—Ö–æ–¥—è—â–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: ${cat.name} (ID: ${cat.id})', name: 'NetworkTransactionRepository');
            break;
          }
        }
      }

      // –ï—Å–ª–∏ —Å—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π
      if (accountEntity == null) {
        developer.log('‚ö†Ô∏è –°—á–µ—Ç $accountId –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π', name: 'NetworkTransactionRepository');
        accountEntity = AccountEntity(
          id: 0, // –ò—Å–ø–æ–ª—å–∑—É–µ–º 0 –¥–ª—è –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ID –≤ ObjectBox
          name: '–°—á–µ—Ç $accountId',
          balance: '0.00',
          currency: 'RUB',
          createdAt: DateTime.now(),
          updatedAt: DateTime.now(),
        );
        final newAccountId = await _databaseService.addAccount(accountEntity);
        accountEntity = await _databaseService.getAccountById(newAccountId);
        if (accountEntity == null) {
          throw Exception('Failed to create account');
        }
      }

      // –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –≤—Å–µ –µ—â–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é
      if (categoryEntity == null) {
        developer.log('‚ö†Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è –≤—Å–µ –µ—â–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é', name: 'NetworkTransactionRepository');
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ —Å—É–º–º–µ (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è = –¥–æ—Ö–æ–¥)
        final isIncome = double.tryParse(amount) != null && double.parse(amount) > 0;
        categoryEntity = CategoryEntity(
          id: 0, // –ò—Å–ø–æ–ª—å–∑—É–µ–º 0 –¥–ª—è –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ID –≤ ObjectBox
          name: isIncome ? '–î–æ—Ö–æ–¥' : '–†–∞—Å—Ö–æ–¥',
          emoji: isIncome ? 'üí∞' : 'üí∏',
          isIncome: isIncome,
          createdAt: DateTime.now(),
          updatedAt: DateTime.now(),
        );
        final newCategoryId = await _databaseService.addCategory(categoryEntity);
        categoryEntity = await _databaseService.getCategoryById(newCategoryId);
        if (categoryEntity == null) {
          throw Exception('Failed to create category');
        }
      }

      return TransactionResponce(
        id: transactionId,
        account: _mapAccountEntityToBrief(accountEntity),
        category: _mapCategoryEntityToModel(categoryEntity),
        amount: amount,
        transactionDate: transactionDate,
        comment: comment,
        createdAt: createdAt,
        updatedAt: updatedAt,
      );
    } catch (e) {
      developer.log('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: $e', name: 'NetworkTransactionRepository');
      return null;
    }
  }
} 