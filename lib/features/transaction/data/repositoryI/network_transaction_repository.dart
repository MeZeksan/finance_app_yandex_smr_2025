import 'package:finance_app_yandex_smr_2025/core/database/entities/backup_operation_entity.dart';
import 'package:finance_app_yandex_smr_2025/core/database/services/database_service.dart';
import 'package:finance_app_yandex_smr_2025/core/network/api_client.dart';
import 'package:finance_app_yandex_smr_2025/core/network/network_service.dart';
import 'package:finance_app_yandex_smr_2025/core/services/backup_service.dart';
import 'package:finance_app_yandex_smr_2025/features/transaction/data/models/transaction/transaction_request/transaction_request.dart';
import 'package:finance_app_yandex_smr_2025/features/transaction/data/models/transaction/transaction_responce/transaction_responce.dart';
import 'package:finance_app_yandex_smr_2025/features/transaction/domain/repository/transaction_repository.dart';
import 'package:finance_app_yandex_smr_2025/core/database/entities/transaction_entity.dart';
import 'package:finance_app_yandex_smr_2025/core/database/entities/account_entity.dart';
import 'package:finance_app_yandex_smr_2025/core/database/entities/category_entity.dart';
import 'package:finance_app_yandex_smr_2025/features/account/data/models/account_brief/account_brief.dart';
import 'package:finance_app_yandex_smr_2025/features/category/data/models/category.dart';
import 'dart:developer' as developer;

class NetworkTransactionRepository implements TransactionRepository {
  final DatabaseService _databaseService = DatabaseService.instance;
  final ApiClient _apiClient = ApiClient();
  final NetworkService _networkService = NetworkService();
  final BackupService _backupService = BackupService();

  @override
  Future<TransactionResponce?> getTransactionById(int transactionId) async {
    developer.log(
      'üîç –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ ID: $transactionId',
      name: 'NetworkTransactionRepository',
    );

    // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ–∂–∏–¥–∞—é—â–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
    if (_networkService.isConnected) {
      developer.log('üì° –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ–∂–∏–¥–∞—é—â–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π', name: 'NetworkTransactionRepository');
      await _backupService.syncPendingOperations();
    }

    // –ò—â–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ
    developer.log('üíæ –ü–æ–∏—Å–∫ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ', name: 'NetworkTransactionRepository');
    final localTransaction = await _databaseService.getTransactionById(transactionId);
    if (localTransaction != null) {
      developer.log('‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ', name: 'NetworkTransactionRepository');
      return await _mapEntityToResponse(localTransaction);
    }

    // –ï—Å–ª–∏ –Ω–µ—Ç –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ –∏ –µ—Å—Ç—å —Å–µ—Ç—å, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å —Å–µ—Ä–≤–µ—Ä–∞
    if (_networkService.isConnected) {
      developer.log('üåê –ó–∞–ø—Ä–æ—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞', name: 'NetworkTransactionRepository');
      try {
        final response = await _apiClient.get('/transactions/$transactionId');
        if (response.statusCode == 200 && response.data != null) {
          final transactionData = response.data as Map<String, dynamic>;
          final transactionResponse = TransactionResponce.fromJson(transactionData);
          
          developer.log('‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ', name: 'NetworkTransactionRepository');
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω—É—é –±–∞–∑—É
          await _saveTransactionToLocal(transactionResponse);
          return transactionResponse;
        }
      } catch (e) {
        developer.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞: $e', name: 'NetworkTransactionRepository');
      }
    } else {
      developer.log('üìµ –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ç–∏', name: 'NetworkTransactionRepository');
    }

    developer.log('‚ùå –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', name: 'NetworkTransactionRepository');
    return null;
  }



  @override
  Future<List<TransactionResponce>> getTransactionsByDateAndType({
    required DateTime dateFrom,
    required DateTime dateTo,
    required bool isIncome,
  }) async {
    developer.log(
      'üîç –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∑–∞ –ø–µ—Ä–∏–æ–¥: ${dateFrom.toLocal()} - ${dateTo.toLocal()}, isIncome: $isIncome',
      name: 'NetworkTransactionRepository',
    );

    // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ–∂–∏–¥–∞—é—â–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
    if (_networkService.isConnected) {
      developer.log('üì° –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ–∂–∏–¥–∞—é—â–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π', name: 'NetworkTransactionRepository');
      await _backupService.syncPendingOperations();
    }

    // –ü–æ–ª—É—á–∞–µ–º –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑—ã —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
    developer.log('üíæ –ü–æ–∏—Å–∫ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ', name: 'NetworkTransactionRepository');
    final localTransactions = await _databaseService.getTransactionsByDateRange(
      startDate: dateFrom,
      endDate: dateTo,
      isIncome: isIncome,
    );

    developer.log('üìä –ù–∞–π–¥–µ–Ω–æ ${localTransactions.length} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π', name: 'NetworkTransactionRepository');

    return await Future.wait(localTransactions.map(_mapEntityToResponse));
  }

  @override
  Future<TransactionResponce> addTransaction(TransactionRequest request) async {
    developer.log(
      '‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: ${request.amount} ${request.transactionDate}',
      name: 'NetworkTransactionRepository',
    );

    // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π ID –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è
    final tempId = DateTime.now().millisecondsSinceEpoch;
    
    // –°–Ω–∞—á–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
    developer.log('üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ª–æ–∫–∞–ª—å–Ω–æ', name: 'NetworkTransactionRepository');
    final entity = _mapRequestToEntity(request, tempId);
    final localId = await _databaseService.addTransaction(entity);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –±—ç–∫–∞–ø –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    developer.log('üìã –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏', name: 'NetworkTransactionRepository');
    await _backupService.addBackupOperation(
      operationType: BackupOperationType.create,
      dataType: BackupDataType.transaction,
      originalId: localId,
      data: request.toJson(),
    );

    // –ï—Å–ª–∏ –µ—Å—Ç—å —Å–µ—Ç—å, –ø—ã—Ç–∞–µ–º—Å—è —Å—Ä–∞–∑—É —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å
    if (_networkService.isConnected) {
      developer.log('üì° –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º', name: 'NetworkTransactionRepository');
      await _backupService.syncPendingOperations();
    } else {
      developer.log('üìµ –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ç–∏, —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ—Ç–ª–æ–∂–µ–Ω–∞', name: 'NetworkTransactionRepository');
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    final savedEntity = await _databaseService.getTransactionById(localId);
    developer.log('‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞ —Å ID: $localId', name: 'NetworkTransactionRepository');
    return await _mapEntityToResponse(savedEntity!);
  }

  @override
  Future<TransactionResponce> updateTransaction(
    int transactionId,
    TransactionRequest request,
  ) async {
    developer.log(
      '‚úèÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ ID: $transactionId',
      name: 'NetworkTransactionRepository',
    );

    // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
    developer.log('üíæ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ª–æ–∫–∞–ª—å–Ω–æ', name: 'NetworkTransactionRepository');
    final entity = _mapRequestToEntity(request, transactionId);
    await _databaseService.addTransaction(entity);

    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –±—ç–∫–∞–ø –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    developer.log('üìã –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏', name: 'NetworkTransactionRepository');
    await _backupService.addBackupOperation(
      operationType: BackupOperationType.update,
      dataType: BackupDataType.transaction,
      originalId: transactionId,
      data: request.toJson(),
    );

    // –ï—Å–ª–∏ –µ—Å—Ç—å —Å–µ—Ç—å, –ø—ã—Ç–∞–µ–º—Å—è —Å—Ä–∞–∑—É —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å
    if (_networkService.isConnected) {
      developer.log('üì° –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º', name: 'NetworkTransactionRepository');
      await _backupService.syncPendingOperations();
    } else {
      developer.log('üìµ –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ç–∏, —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ—Ç–ª–æ–∂–µ–Ω–∞', name: 'NetworkTransactionRepository');
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    final updatedEntity = await _databaseService.getTransactionById(transactionId);
    developer.log('‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞', name: 'NetworkTransactionRepository');
    return await _mapEntityToResponse(updatedEntity!);
  }

  @override
  Future<bool> deleteTransaction(int transactionId) async {
    developer.log(
      'üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ ID: $transactionId',
      name: 'NetworkTransactionRepository',
    );

    // –£–¥–∞–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
    developer.log('üíæ –£–¥–∞–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ª–æ–∫–∞–ª—å–Ω–æ', name: 'NetworkTransactionRepository');
    final deleted = await _databaseService.deleteTransaction(transactionId);
    
    if (deleted) {
      developer.log('üìã –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏', name: 'NetworkTransactionRepository');
      // –î–æ–±–∞–≤–ª—è–µ–º –≤ –±—ç–∫–∞–ø –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
      await _backupService.addBackupOperation(
        operationType: BackupOperationType.delete,
        dataType: BackupDataType.transaction,
        originalId: transactionId,
        data: {'id': transactionId},
      );

      // –ï—Å–ª–∏ –µ—Å—Ç—å —Å–µ—Ç—å, –ø—ã—Ç–∞–µ–º—Å—è —Å—Ä–∞–∑—É —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å
      if (_networkService.isConnected) {
        developer.log('üì° –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º', name: 'NetworkTransactionRepository');
        await _backupService.syncPendingOperations();
      } else {
        developer.log('üìµ –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ç–∏, —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ—Ç–ª–æ–∂–µ–Ω–∞', name: 'NetworkTransactionRepository');
      }
      
      developer.log('‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞', name: 'NetworkTransactionRepository');
    } else {
      developer.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏', name: 'NetworkTransactionRepository');
    }
    
    return deleted;
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –º–∞–ø–ø–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö
  Future<TransactionResponce> _mapEntityToResponse(TransactionEntity entity) async {
    // –ü–æ–ª—É—á–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å—É—â–Ω–æ—Å—Ç–∏
    final accountEntity = await _databaseService.getAccountById(entity.accountId);
    final categoryEntity = await _databaseService.getCategoryById(entity.categoryId);
    
    if (accountEntity == null || categoryEntity == null) {
      throw Exception('Account or Category not found for transaction ${entity.id}');
    }

    return TransactionResponce(
      id: entity.id,
      account: _mapAccountEntityToBrief(accountEntity),
      category: _mapCategoryEntityToModel(categoryEntity),
      amount: entity.amount,
      transactionDate: entity.transactionDate,
      comment: entity.comment,
      createdAt: entity.createdAt,
      updatedAt: entity.updatedAt,
    );
  }

  TransactionEntity _mapRequestToEntity(TransactionRequest request, int id) {
    final now = DateTime.now();
    
    final entity = TransactionEntity(
      id: id,
      amount: request.amount,
      transactionDate: request.transactionDate,
      comment: request.comment,
      createdAt: now,
      updatedAt: now,
    );
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–≤—è–∑–∏
    entity.accountId = request.accountId;
    entity.categoryId = request.categoryId;
    
    return entity;
  }

  Future<void> _saveTransactionToLocal(TransactionResponce transaction) async {
    final entity = TransactionEntity(
      id: transaction.id,
      amount: transaction.amount,
      transactionDate: transaction.transactionDate,
      comment: transaction.comment,
      createdAt: transaction.createdAt,
      updatedAt: transaction.updatedAt,
    );
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–≤—è–∑–∏
    entity.accountId = transaction.account.id;
    entity.categoryId = transaction.category.id;
    
    await _databaseService.addTransaction(entity);
  }



  AccountBrief _mapAccountEntityToBrief(AccountEntity accountEntity) {
    return AccountBrief(
      id: accountEntity.id,
      name: accountEntity.name,
      balance: accountEntity.balance,
      currency: accountEntity.currency,
    );
  }

  Category _mapCategoryEntityToModel(CategoryEntity categoryEntity) {
    return Category(
      id: categoryEntity.id,
      name: categoryEntity.name,
      emoji: categoryEntity.emoji,
      isIncome: categoryEntity.isIncome,
    );
  }
} 