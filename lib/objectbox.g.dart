// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'core/database/entities/account_entity.dart';
import 'core/database/entities/backup_operation_entity.dart';
import 'core/database/entities/category_entity.dart';
import 'core/database/entities/transaction_entity.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
    id: const obx_int.IdUid(1, 5768456230215513924),
    name: 'AccountEntity',
    lastPropertyId: const obx_int.IdUid(6, 7644139989854315011),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 6167224910254961979),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 1172762958610730677),
        name: 'name',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 4896312848518754572),
        name: 'balance',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 4698425517048170081),
        name: 'currency',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 2109682793091487162),
        name: 'createdAt',
        type: 10,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 7644139989854315011),
        name: 'updatedAt',
        type: 10,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(2, 8527192955239270733),
    name: 'CategoryEntity',
    lastPropertyId: const obx_int.IdUid(6, 3582545873125940669),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 5555820395441964502),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 891201159281493784),
        name: 'name',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 2370824068264722613),
        name: 'emoji',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 4908011140921188557),
        name: 'isIncome',
        type: 1,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 9017760525567514616),
        name: 'createdAt',
        type: 10,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 3582545873125940669),
        name: 'updatedAt',
        type: 10,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(3, 1243530750600363184),
    name: 'TransactionEntity',
    lastPropertyId: const obx_int.IdUid(8, 7199758987599982734),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 7713940914348539354),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 8563697124208217211),
        name: 'accountId',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 9021315194742832026),
        name: 'categoryId',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 5536237079532940315),
        name: 'amount',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 3788359984047420235),
        name: 'transactionDate',
        type: 10,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 6396685122437388900),
        name: 'comment',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(7, 6692283445453591693),
        name: 'createdAt',
        type: 10,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(8, 7199758987599982734),
        name: 'updatedAt',
        type: 10,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(4, 3358571842132233271),
    name: 'BackupOperationEntity',
    lastPropertyId: const obx_int.IdUid(10, 5820082068494800474),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 5727767306477363712),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 7045915131423093057),
        name: 'operationType',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 881516174753026508),
        name: 'dataType',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 8661546849620015120),
        name: 'originalId',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 5121727424931777154),
        name: 'jsonData',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 3892950052902170044),
        name: 'createdAt',
        type: 10,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(7, 2493245499154490761),
        name: 'attemptedSync',
        type: 1,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(8, 1378733930590230979),
        name: 'syncAttempts',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(9, 8248243406927731561),
        name: 'lastSyncAttempt',
        type: 10,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(10, 5820082068494800474),
        name: 'lastSyncError',
        type: 9,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore({
  String? directory,
  int? maxDBSizeInKB,
  int? maxDataSizeInKB,
  int? fileMode,
  int? maxReaders,
  bool queriesCaseSensitiveDefault = true,
  String? macosApplicationGroup,
}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(
    getObjectBoxModel(),
    directory: directory ?? (await defaultStoreDirectory()).path,
    maxDBSizeInKB: maxDBSizeInKB,
    maxDataSizeInKB: maxDataSizeInKB,
    fileMode: fileMode,
    maxReaders: maxReaders,
    queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
    macosApplicationGroup: macosApplicationGroup,
  );
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
    entities: _entities,
    lastEntityId: const obx_int.IdUid(4, 3358571842132233271),
    lastIndexId: const obx_int.IdUid(30, 4465890836934542631),
    lastRelationId: const obx_int.IdUid(0, 0),
    lastSequenceId: const obx_int.IdUid(0, 0),
    retiredEntityUids: const [],
    retiredIndexUids: const [
      2183049154743982104,
      4208388325729539849,
      3072619829574383904,
      3325948992978038277,
      6256070328816523972,
      6848160860070778402,
      3425440574333542200,
      1870677263723193553,
      1144824039262702927,
      3499104209080032416,
      3479694455226136724,
      8160201880988302970,
      1965249712728021232,
      2779143236794740957,
      1908480270357263987,
      7880401937429714160,
      1903392201167010429,
      7301699161370236505,
      4648476766453924530,
      5423346017247941480,
      3175971139045727290,
      2058105902653660033,
      7495226091645541985,
      6540662413114824772,
      8200747652622722405,
      5020021149545051460,
      133675210022402219,
      2400884134035597496,
      1035795766311969637,
      4465890836934542631,
    ],
    retiredPropertyUids: const [],
    retiredRelationUids: const [],
    modelVersion: 5,
    modelVersionParserMinimum: 5,
    version: 1,
  );

  final bindings = <Type, obx_int.EntityDefinition>{
    AccountEntity: obx_int.EntityDefinition<AccountEntity>(
      model: _entities[0],
      toOneRelations: (AccountEntity object) => [],
      toManyRelations: (AccountEntity object) => {},
      getId: (AccountEntity object) => object.id,
      setId: (AccountEntity object, int id) {
        object.id = id;
      },
      objectToFB: (AccountEntity object, fb.Builder fbb) {
        final nameOffset = fbb.writeString(object.name);
        final balanceOffset = fbb.writeString(object.balance);
        final currencyOffset = fbb.writeString(object.currency);
        fbb.startTable(7);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, nameOffset);
        fbb.addOffset(2, balanceOffset);
        fbb.addOffset(3, currencyOffset);
        fbb.addInt64(4, object.createdAt.millisecondsSinceEpoch);
        fbb.addInt64(5, object.updatedAt.millisecondsSinceEpoch);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final nameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final balanceParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 8, '');
        final currencyParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 10, '');
        final createdAtParam = DateTime.fromMillisecondsSinceEpoch(
          const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0),
        );
        final updatedAtParam = DateTime.fromMillisecondsSinceEpoch(
          const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0),
        );
        final object = AccountEntity(
          id: idParam,
          name: nameParam,
          balance: balanceParam,
          currency: currencyParam,
          createdAt: createdAtParam,
          updatedAt: updatedAtParam,
        );

        return object;
      },
    ),
    CategoryEntity: obx_int.EntityDefinition<CategoryEntity>(
      model: _entities[1],
      toOneRelations: (CategoryEntity object) => [],
      toManyRelations: (CategoryEntity object) => {},
      getId: (CategoryEntity object) => object.id,
      setId: (CategoryEntity object, int id) {
        object.id = id;
      },
      objectToFB: (CategoryEntity object, fb.Builder fbb) {
        final nameOffset = fbb.writeString(object.name);
        final emojiOffset = fbb.writeString(object.emoji);
        fbb.startTable(7);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, nameOffset);
        fbb.addOffset(2, emojiOffset);
        fbb.addBool(3, object.isIncome);
        fbb.addInt64(4, object.createdAt.millisecondsSinceEpoch);
        fbb.addInt64(5, object.updatedAt.millisecondsSinceEpoch);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final nameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final emojiParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 8, '');
        final isIncomeParam = const fb.BoolReader().vTableGet(
          buffer,
          rootOffset,
          10,
          false,
        );
        final createdAtParam = DateTime.fromMillisecondsSinceEpoch(
          const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0),
        );
        final updatedAtParam = DateTime.fromMillisecondsSinceEpoch(
          const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0),
        );
        final object = CategoryEntity(
          id: idParam,
          name: nameParam,
          emoji: emojiParam,
          isIncome: isIncomeParam,
          createdAt: createdAtParam,
          updatedAt: updatedAtParam,
        );

        return object;
      },
    ),
    TransactionEntity: obx_int.EntityDefinition<TransactionEntity>(
      model: _entities[2],
      toOneRelations: (TransactionEntity object) => [],
      toManyRelations: (TransactionEntity object) => {},
      getId: (TransactionEntity object) => object.id,
      setId: (TransactionEntity object, int id) {
        object.id = id;
      },
      objectToFB: (TransactionEntity object, fb.Builder fbb) {
        final amountOffset = fbb.writeString(object.amount);
        final commentOffset =
            object.comment == null ? null : fbb.writeString(object.comment!);
        fbb.startTable(9);
        fbb.addInt64(0, object.id);
        fbb.addInt64(1, object.accountId);
        fbb.addInt64(2, object.categoryId);
        fbb.addOffset(3, amountOffset);
        fbb.addInt64(4, object.transactionDate.millisecondsSinceEpoch);
        fbb.addOffset(5, commentOffset);
        fbb.addInt64(6, object.createdAt.millisecondsSinceEpoch);
        fbb.addInt64(7, object.updatedAt.millisecondsSinceEpoch);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final amountParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 10, '');
        final transactionDateParam = DateTime.fromMillisecondsSinceEpoch(
          const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0),
        );
        final commentParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 14);
        final createdAtParam = DateTime.fromMillisecondsSinceEpoch(
          const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0),
        );
        final updatedAtParam = DateTime.fromMillisecondsSinceEpoch(
          const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0),
        );
        final object =
            TransactionEntity(
                id: idParam,
                amount: amountParam,
                transactionDate: transactionDateParam,
                comment: commentParam,
                createdAt: createdAtParam,
                updatedAt: updatedAtParam,
              )
              ..accountId = const fb.Int64Reader().vTableGet(
                buffer,
                rootOffset,
                6,
                0,
              )
              ..categoryId = const fb.Int64Reader().vTableGet(
                buffer,
                rootOffset,
                8,
                0,
              );

        return object;
      },
    ),
    BackupOperationEntity: obx_int.EntityDefinition<BackupOperationEntity>(
      model: _entities[3],
      toOneRelations: (BackupOperationEntity object) => [],
      toManyRelations: (BackupOperationEntity object) => {},
      getId: (BackupOperationEntity object) => object.id,
      setId: (BackupOperationEntity object, int id) {
        object.id = id;
      },
      objectToFB: (BackupOperationEntity object, fb.Builder fbb) {
        final jsonDataOffset = fbb.writeString(object.jsonData);
        final lastSyncErrorOffset =
            object.lastSyncError == null
                ? null
                : fbb.writeString(object.lastSyncError!);
        fbb.startTable(11);
        fbb.addInt64(0, object.id);
        fbb.addInt64(1, object.operationType);
        fbb.addInt64(2, object.dataType);
        fbb.addInt64(3, object.originalId);
        fbb.addOffset(4, jsonDataOffset);
        fbb.addInt64(5, object.createdAt.millisecondsSinceEpoch);
        fbb.addBool(6, object.attemptedSync);
        fbb.addInt64(7, object.syncAttempts);
        fbb.addInt64(8, object.lastSyncAttempt?.millisecondsSinceEpoch);
        fbb.addOffset(9, lastSyncErrorOffset);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final lastSyncAttemptValue = const fb.Int64Reader().vTableGetNullable(
          buffer,
          rootOffset,
          20,
        );
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final operationTypeParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          6,
          0,
        );
        final dataTypeParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          8,
          0,
        );
        final originalIdParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          10,
          0,
        );
        final jsonDataParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 12, '');
        final createdAtParam = DateTime.fromMillisecondsSinceEpoch(
          const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0),
        );
        final attemptedSyncParam = const fb.BoolReader().vTableGet(
          buffer,
          rootOffset,
          16,
          false,
        );
        final syncAttemptsParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          18,
          0,
        );
        final lastSyncAttemptParam =
            lastSyncAttemptValue == null
                ? null
                : DateTime.fromMillisecondsSinceEpoch(lastSyncAttemptValue);
        final lastSyncErrorParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 22);
        final object = BackupOperationEntity(
          id: idParam,
          operationType: operationTypeParam,
          dataType: dataTypeParam,
          originalId: originalIdParam,
          jsonData: jsonDataParam,
          createdAt: createdAtParam,
          attemptedSync: attemptedSyncParam,
          syncAttempts: syncAttemptsParam,
          lastSyncAttempt: lastSyncAttemptParam,
          lastSyncError: lastSyncErrorParam,
        );

        return object;
      },
    ),
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [AccountEntity] entity fields to define ObjectBox queries.
class AccountEntity_ {
  /// See [AccountEntity.id].
  static final id = obx.QueryIntegerProperty<AccountEntity>(
    _entities[0].properties[0],
  );

  /// See [AccountEntity.name].
  static final name = obx.QueryStringProperty<AccountEntity>(
    _entities[0].properties[1],
  );

  /// See [AccountEntity.balance].
  static final balance = obx.QueryStringProperty<AccountEntity>(
    _entities[0].properties[2],
  );

  /// See [AccountEntity.currency].
  static final currency = obx.QueryStringProperty<AccountEntity>(
    _entities[0].properties[3],
  );

  /// See [AccountEntity.createdAt].
  static final createdAt = obx.QueryDateProperty<AccountEntity>(
    _entities[0].properties[4],
  );

  /// See [AccountEntity.updatedAt].
  static final updatedAt = obx.QueryDateProperty<AccountEntity>(
    _entities[0].properties[5],
  );
}

/// [CategoryEntity] entity fields to define ObjectBox queries.
class CategoryEntity_ {
  /// See [CategoryEntity.id].
  static final id = obx.QueryIntegerProperty<CategoryEntity>(
    _entities[1].properties[0],
  );

  /// See [CategoryEntity.name].
  static final name = obx.QueryStringProperty<CategoryEntity>(
    _entities[1].properties[1],
  );

  /// See [CategoryEntity.emoji].
  static final emoji = obx.QueryStringProperty<CategoryEntity>(
    _entities[1].properties[2],
  );

  /// See [CategoryEntity.isIncome].
  static final isIncome = obx.QueryBooleanProperty<CategoryEntity>(
    _entities[1].properties[3],
  );

  /// See [CategoryEntity.createdAt].
  static final createdAt = obx.QueryDateProperty<CategoryEntity>(
    _entities[1].properties[4],
  );

  /// See [CategoryEntity.updatedAt].
  static final updatedAt = obx.QueryDateProperty<CategoryEntity>(
    _entities[1].properties[5],
  );
}

/// [TransactionEntity] entity fields to define ObjectBox queries.
class TransactionEntity_ {
  /// See [TransactionEntity.id].
  static final id = obx.QueryIntegerProperty<TransactionEntity>(
    _entities[2].properties[0],
  );

  /// See [TransactionEntity.accountId].
  static final accountId = obx.QueryIntegerProperty<TransactionEntity>(
    _entities[2].properties[1],
  );

  /// See [TransactionEntity.categoryId].
  static final categoryId = obx.QueryIntegerProperty<TransactionEntity>(
    _entities[2].properties[2],
  );

  /// See [TransactionEntity.amount].
  static final amount = obx.QueryStringProperty<TransactionEntity>(
    _entities[2].properties[3],
  );

  /// See [TransactionEntity.transactionDate].
  static final transactionDate = obx.QueryDateProperty<TransactionEntity>(
    _entities[2].properties[4],
  );

  /// See [TransactionEntity.comment].
  static final comment = obx.QueryStringProperty<TransactionEntity>(
    _entities[2].properties[5],
  );

  /// See [TransactionEntity.createdAt].
  static final createdAt = obx.QueryDateProperty<TransactionEntity>(
    _entities[2].properties[6],
  );

  /// See [TransactionEntity.updatedAt].
  static final updatedAt = obx.QueryDateProperty<TransactionEntity>(
    _entities[2].properties[7],
  );
}

/// [BackupOperationEntity] entity fields to define ObjectBox queries.
class BackupOperationEntity_ {
  /// See [BackupOperationEntity.id].
  static final id = obx.QueryIntegerProperty<BackupOperationEntity>(
    _entities[3].properties[0],
  );

  /// See [BackupOperationEntity.operationType].
  static final operationType = obx.QueryIntegerProperty<BackupOperationEntity>(
    _entities[3].properties[1],
  );

  /// See [BackupOperationEntity.dataType].
  static final dataType = obx.QueryIntegerProperty<BackupOperationEntity>(
    _entities[3].properties[2],
  );

  /// See [BackupOperationEntity.originalId].
  static final originalId = obx.QueryIntegerProperty<BackupOperationEntity>(
    _entities[3].properties[3],
  );

  /// See [BackupOperationEntity.jsonData].
  static final jsonData = obx.QueryStringProperty<BackupOperationEntity>(
    _entities[3].properties[4],
  );

  /// See [BackupOperationEntity.createdAt].
  static final createdAt = obx.QueryDateProperty<BackupOperationEntity>(
    _entities[3].properties[5],
  );

  /// See [BackupOperationEntity.attemptedSync].
  static final attemptedSync = obx.QueryBooleanProperty<BackupOperationEntity>(
    _entities[3].properties[6],
  );

  /// See [BackupOperationEntity.syncAttempts].
  static final syncAttempts = obx.QueryIntegerProperty<BackupOperationEntity>(
    _entities[3].properties[7],
  );

  /// See [BackupOperationEntity.lastSyncAttempt].
  static final lastSyncAttempt = obx.QueryDateProperty<BackupOperationEntity>(
    _entities[3].properties[8],
  );

  /// See [BackupOperationEntity.lastSyncError].
  static final lastSyncError = obx.QueryStringProperty<BackupOperationEntity>(
    _entities[3].properties[9],
  );
}
